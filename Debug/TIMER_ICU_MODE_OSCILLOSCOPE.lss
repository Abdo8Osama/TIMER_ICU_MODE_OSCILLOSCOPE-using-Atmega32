
TIMER_ICU_MODE_OSCILLOSCOPE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000367a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  0000367a  0000370e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080017e  0080017e  0000382c  2**0
                  ALLOC
  3 .stab         00002d84  00000000  00000000  0000382c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010a3  00000000  00000000  000065b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007653  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000077f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000079e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b176  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c34c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c50c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c802  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__vector_6>
      1c:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__vector_7>
      20:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__vector_8>
      24:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 19 	call	0x3386	; 0x3386 <main>
      8a:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e7       	ldi	r22, 0x75	; 117
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 30 1b 	jmp	0x3660	; 0x3660 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e3 58       	subi	r30, 0x83	; 131
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_voidSetpinValue>:

/****************PIN FUNCTIONS *******************************************************/
/************************************************************************************/

void  DIO_voidSetpinValue(u8 u8_port_copy , u8 u8_pin_copy , u8 u8_value_copy)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	27 97       	sbiw	r28, 0x07	; 7
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	6a 83       	std	Y+2, r22	; 0x02
     e46:	4b 83       	std	Y+3, r20	; 0x03
	if((u8_port_copy <= PORTD)&&(u8_pin_copy <=PIN7))
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	84 30       	cpi	r24, 0x04	; 4
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <DIO_voidSetpinValue+0x22>
     e4e:	ee c0       	rjmp	.+476    	; 0x102c <DIO_voidSetpinValue+0x1fe>
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	88 30       	cpi	r24, 0x08	; 8
     e54:	08 f0       	brcs	.+2      	; 0xe58 <DIO_voidSetpinValue+0x2a>
     e56:	ea c0       	rjmp	.+468    	; 0x102c <DIO_voidSetpinValue+0x1fe>
	{
		if(u8_value_copy == HIGH)
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	09 f0       	breq	.+2      	; 0xe60 <DIO_voidSetpinValue+0x32>
     e5e:	6f c0       	rjmp	.+222    	; 0xf3e <DIO_voidSetpinValue+0x110>
		{
			switch(u8_port_copy)
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	3f 83       	std	Y+7, r19	; 0x07
     e68:	2e 83       	std	Y+6, r18	; 0x06
     e6a:	8e 81       	ldd	r24, Y+6	; 0x06
     e6c:	9f 81       	ldd	r25, Y+7	; 0x07
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	91 05       	cpc	r25, r1
     e72:	49 f1       	breq	.+82     	; 0xec6 <DIO_voidSetpinValue+0x98>
     e74:	2e 81       	ldd	r18, Y+6	; 0x06
     e76:	3f 81       	ldd	r19, Y+7	; 0x07
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	31 05       	cpc	r19, r1
     e7c:	2c f4       	brge	.+10     	; 0xe88 <DIO_voidSetpinValue+0x5a>
     e7e:	8e 81       	ldd	r24, Y+6	; 0x06
     e80:	9f 81       	ldd	r25, Y+7	; 0x07
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	61 f0       	breq	.+24     	; 0xe9e <DIO_voidSetpinValue+0x70>
     e86:	d2 c0       	rjmp	.+420    	; 0x102c <DIO_voidSetpinValue+0x1fe>
     e88:	2e 81       	ldd	r18, Y+6	; 0x06
     e8a:	3f 81       	ldd	r19, Y+7	; 0x07
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	71 f1       	breq	.+92     	; 0xeee <DIO_voidSetpinValue+0xc0>
     e92:	8e 81       	ldd	r24, Y+6	; 0x06
     e94:	9f 81       	ldd	r25, Y+7	; 0x07
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	91 05       	cpc	r25, r1
     e9a:	e9 f1       	breq	.+122    	; 0xf16 <DIO_voidSetpinValue+0xe8>
     e9c:	c7 c0       	rjmp	.+398    	; 0x102c <DIO_voidSetpinValue+0x1fe>
			{
				case PORTA : SET(PORTA_REG , u8_pin_copy);break;
     e9e:	ab e3       	ldi	r26, 0x3B	; 59
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	eb e3       	ldi	r30, 0x3B	; 59
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_voidSetpinValue+0x8e>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_voidSetpinValue+0x8a>
     ec0:	84 2b       	or	r24, r20
     ec2:	8c 93       	st	X, r24
     ec4:	b3 c0       	rjmp	.+358    	; 0x102c <DIO_voidSetpinValue+0x1fe>
				case PORTB : SET(PORTB_REG , u8_pin_copy);break;
     ec6:	a8 e3       	ldi	r26, 0x38	; 56
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e8 e3       	ldi	r30, 0x38	; 56
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_voidSetpinValue+0xb6>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_voidSetpinValue+0xb2>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	9f c0       	rjmp	.+318    	; 0x102c <DIO_voidSetpinValue+0x1fe>
				case PORTC : SET(PORTC_REG , u8_pin_copy);break;
     eee:	a5 e3       	ldi	r26, 0x35	; 53
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e5 e3       	ldi	r30, 0x35	; 53
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_voidSetpinValue+0xde>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_voidSetpinValue+0xda>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	8b c0       	rjmp	.+278    	; 0x102c <DIO_voidSetpinValue+0x1fe>
				case PORTD : SET(PORTD_REG , u8_pin_copy);break;
     f16:	a2 e3       	ldi	r26, 0x32	; 50
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e2 e3       	ldi	r30, 0x32	; 50
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_voidSetpinValue+0x106>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_voidSetpinValue+0x102>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	77 c0       	rjmp	.+238    	; 0x102c <DIO_voidSetpinValue+0x1fe>
				default    : break;
			}
		}
		else if(u8_value_copy == LOW)
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	88 23       	and	r24, r24
     f42:	09 f0       	breq	.+2      	; 0xf46 <DIO_voidSetpinValue+0x118>
     f44:	73 c0       	rjmp	.+230    	; 0x102c <DIO_voidSetpinValue+0x1fe>
		{
			switch(u8_port_copy)
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	3d 83       	std	Y+5, r19	; 0x05
     f4e:	2c 83       	std	Y+4, r18	; 0x04
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	9d 81       	ldd	r25, Y+5	; 0x05
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	59 f1       	breq	.+86     	; 0xfb0 <DIO_voidSetpinValue+0x182>
     f5a:	2c 81       	ldd	r18, Y+4	; 0x04
     f5c:	3d 81       	ldd	r19, Y+5	; 0x05
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	2c f4       	brge	.+10     	; 0xf6e <DIO_voidSetpinValue+0x140>
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	69 f0       	breq	.+26     	; 0xf86 <DIO_voidSetpinValue+0x158>
     f6c:	5f c0       	rjmp	.+190    	; 0x102c <DIO_voidSetpinValue+0x1fe>
     f6e:	2c 81       	ldd	r18, Y+4	; 0x04
     f70:	3d 81       	ldd	r19, Y+5	; 0x05
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	89 f1       	breq	.+98     	; 0xfda <DIO_voidSetpinValue+0x1ac>
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	83 30       	cpi	r24, 0x03	; 3
     f7e:	91 05       	cpc	r25, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <DIO_voidSetpinValue+0x156>
     f82:	40 c0       	rjmp	.+128    	; 0x1004 <DIO_voidSetpinValue+0x1d6>
     f84:	53 c0       	rjmp	.+166    	; 0x102c <DIO_voidSetpinValue+0x1fe>
			{
				case PORTA : CLR(PORTA_REG , u8_pin_copy);break;
     f86:	ab e3       	ldi	r26, 0x3B	; 59
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	eb e3       	ldi	r30, 0x3B	; 59
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_voidSetpinValue+0x176>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_voidSetpinValue+0x172>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	3e c0       	rjmp	.+124    	; 0x102c <DIO_voidSetpinValue+0x1fe>
				case PORTB : CLR(PORTB_REG , u8_pin_copy);break;
     fb0:	a8 e3       	ldi	r26, 0x38	; 56
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e8 e3       	ldi	r30, 0x38	; 56
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_voidSetpinValue+0x1a0>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_voidSetpinValue+0x19c>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	29 c0       	rjmp	.+82     	; 0x102c <DIO_voidSetpinValue+0x1fe>
				case PORTC : CLR(PORTC_REG , u8_pin_copy);break;
     fda:	a5 e3       	ldi	r26, 0x35	; 53
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e5 e3       	ldi	r30, 0x35	; 53
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_voidSetpinValue+0x1ca>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_voidSetpinValue+0x1c6>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	14 c0       	rjmp	.+40     	; 0x102c <DIO_voidSetpinValue+0x1fe>
				case PORTD : CLR(PORTD_REG , u8_pin_copy);break;
    1004:	a2 e3       	ldi	r26, 0x32	; 50
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e2 e3       	ldi	r30, 0x32	; 50
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_voidSetpinValue+0x1f4>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_voidSetpinValue+0x1f0>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
	}
	else
	{
		/*..................*/
	}
}
    102c:	27 96       	adiw	r28, 0x07	; 7
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <DIO_voidSetpinDirection>:

/****************************************************************************************/
/***************************************************************************************/

void  DIO_voidSetpinDirection(u8 u8_port_copy , u8 u8_pin_copy , u8 u8_direction_copy)
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	27 97       	sbiw	r28, 0x07	; 7
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	6a 83       	std	Y+2, r22	; 0x02
    1056:	4b 83       	std	Y+3, r20	; 0x03
	if((u8_port_copy <= PORTD)&&(u8_pin_copy <=PIN7))
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	84 30       	cpi	r24, 0x04	; 4
    105c:	08 f0       	brcs	.+2      	; 0x1060 <DIO_voidSetpinDirection+0x22>
    105e:	ee c0       	rjmp	.+476    	; 0x123c <DIO_voidSetpinDirection+0x1fe>
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	88 30       	cpi	r24, 0x08	; 8
    1064:	08 f0       	brcs	.+2      	; 0x1068 <DIO_voidSetpinDirection+0x2a>
    1066:	ea c0       	rjmp	.+468    	; 0x123c <DIO_voidSetpinDirection+0x1fe>
	{
		if(u8_direction_copy == OUT)
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	09 f0       	breq	.+2      	; 0x1070 <DIO_voidSetpinDirection+0x32>
    106e:	6f c0       	rjmp	.+222    	; 0x114e <DIO_voidSetpinDirection+0x110>
		{
			switch(u8_port_copy)
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	3f 83       	std	Y+7, r19	; 0x07
    1078:	2e 83       	std	Y+6, r18	; 0x06
    107a:	8e 81       	ldd	r24, Y+6	; 0x06
    107c:	9f 81       	ldd	r25, Y+7	; 0x07
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	91 05       	cpc	r25, r1
    1082:	49 f1       	breq	.+82     	; 0x10d6 <DIO_voidSetpinDirection+0x98>
    1084:	2e 81       	ldd	r18, Y+6	; 0x06
    1086:	3f 81       	ldd	r19, Y+7	; 0x07
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	2c f4       	brge	.+10     	; 0x1098 <DIO_voidSetpinDirection+0x5a>
    108e:	8e 81       	ldd	r24, Y+6	; 0x06
    1090:	9f 81       	ldd	r25, Y+7	; 0x07
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	61 f0       	breq	.+24     	; 0x10ae <DIO_voidSetpinDirection+0x70>
    1096:	d2 c0       	rjmp	.+420    	; 0x123c <DIO_voidSetpinDirection+0x1fe>
    1098:	2e 81       	ldd	r18, Y+6	; 0x06
    109a:	3f 81       	ldd	r19, Y+7	; 0x07
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	71 f1       	breq	.+92     	; 0x10fe <DIO_voidSetpinDirection+0xc0>
    10a2:	8e 81       	ldd	r24, Y+6	; 0x06
    10a4:	9f 81       	ldd	r25, Y+7	; 0x07
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	e9 f1       	breq	.+122    	; 0x1126 <DIO_voidSetpinDirection+0xe8>
    10ac:	c7 c0       	rjmp	.+398    	; 0x123c <DIO_voidSetpinDirection+0x1fe>
			{
				case PORTA : SET(DDRA_REG , u8_pin_copy);break;
    10ae:	aa e3       	ldi	r26, 0x3A	; 58
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ea e3       	ldi	r30, 0x3A	; 58
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_voidSetpinDirection+0x8e>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_voidSetpinDirection+0x8a>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	b3 c0       	rjmp	.+358    	; 0x123c <DIO_voidSetpinDirection+0x1fe>
				case PORTB : SET(DDRB_REG , u8_pin_copy);break;
    10d6:	a7 e3       	ldi	r26, 0x37	; 55
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e7 e3       	ldi	r30, 0x37	; 55
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_voidSetpinDirection+0xb6>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_voidSetpinDirection+0xb2>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	9f c0       	rjmp	.+318    	; 0x123c <DIO_voidSetpinDirection+0x1fe>
				case PORTC : SET(DDRC_REG , u8_pin_copy);break;
    10fe:	a4 e3       	ldi	r26, 0x34	; 52
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e4 e3       	ldi	r30, 0x34	; 52
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_voidSetpinDirection+0xde>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_voidSetpinDirection+0xda>
    1120:	84 2b       	or	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	8b c0       	rjmp	.+278    	; 0x123c <DIO_voidSetpinDirection+0x1fe>
				case PORTD : SET(DDRD_REG , u8_pin_copy);break;
    1126:	a1 e3       	ldi	r26, 0x31	; 49
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e1 e3       	ldi	r30, 0x31	; 49
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_voidSetpinDirection+0x106>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_voidSetpinDirection+0x102>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	77 c0       	rjmp	.+238    	; 0x123c <DIO_voidSetpinDirection+0x1fe>
				default    : break;
			}
		}
		else if(u8_direction_copy == IN)
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	88 23       	and	r24, r24
    1152:	09 f0       	breq	.+2      	; 0x1156 <DIO_voidSetpinDirection+0x118>
    1154:	73 c0       	rjmp	.+230    	; 0x123c <DIO_voidSetpinDirection+0x1fe>
		{
			switch(u8_port_copy)
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	3d 83       	std	Y+5, r19	; 0x05
    115e:	2c 83       	std	Y+4, r18	; 0x04
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	9d 81       	ldd	r25, Y+5	; 0x05
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	91 05       	cpc	r25, r1
    1168:	59 f1       	breq	.+86     	; 0x11c0 <DIO_voidSetpinDirection+0x182>
    116a:	2c 81       	ldd	r18, Y+4	; 0x04
    116c:	3d 81       	ldd	r19, Y+5	; 0x05
    116e:	22 30       	cpi	r18, 0x02	; 2
    1170:	31 05       	cpc	r19, r1
    1172:	2c f4       	brge	.+10     	; 0x117e <DIO_voidSetpinDirection+0x140>
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	9d 81       	ldd	r25, Y+5	; 0x05
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	69 f0       	breq	.+26     	; 0x1196 <DIO_voidSetpinDirection+0x158>
    117c:	5f c0       	rjmp	.+190    	; 0x123c <DIO_voidSetpinDirection+0x1fe>
    117e:	2c 81       	ldd	r18, Y+4	; 0x04
    1180:	3d 81       	ldd	r19, Y+5	; 0x05
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	31 05       	cpc	r19, r1
    1186:	89 f1       	breq	.+98     	; 0x11ea <DIO_voidSetpinDirection+0x1ac>
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	9d 81       	ldd	r25, Y+5	; 0x05
    118c:	83 30       	cpi	r24, 0x03	; 3
    118e:	91 05       	cpc	r25, r1
    1190:	09 f4       	brne	.+2      	; 0x1194 <DIO_voidSetpinDirection+0x156>
    1192:	40 c0       	rjmp	.+128    	; 0x1214 <DIO_voidSetpinDirection+0x1d6>
    1194:	53 c0       	rjmp	.+166    	; 0x123c <DIO_voidSetpinDirection+0x1fe>
			{
				case PORTA : CLR(DDRA_REG , u8_pin_copy);break;
    1196:	aa e3       	ldi	r26, 0x3A	; 58
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	ea e3       	ldi	r30, 0x3A	; 58
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_voidSetpinDirection+0x176>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <DIO_voidSetpinDirection+0x172>
    11b8:	80 95       	com	r24
    11ba:	84 23       	and	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	3e c0       	rjmp	.+124    	; 0x123c <DIO_voidSetpinDirection+0x1fe>
				case PORTB : CLR(DDRB_REG , u8_pin_copy);break;
    11c0:	a7 e3       	ldi	r26, 0x37	; 55
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e7 e3       	ldi	r30, 0x37	; 55
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_voidSetpinDirection+0x1a0>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_voidSetpinDirection+0x19c>
    11e2:	80 95       	com	r24
    11e4:	84 23       	and	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	29 c0       	rjmp	.+82     	; 0x123c <DIO_voidSetpinDirection+0x1fe>
				case PORTC : CLR(DDRC_REG , u8_pin_copy);break;
    11ea:	a4 e3       	ldi	r26, 0x34	; 52
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e4 e3       	ldi	r30, 0x34	; 52
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_voidSetpinDirection+0x1ca>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_voidSetpinDirection+0x1c6>
    120c:	80 95       	com	r24
    120e:	84 23       	and	r24, r20
    1210:	8c 93       	st	X, r24
    1212:	14 c0       	rjmp	.+40     	; 0x123c <DIO_voidSetpinDirection+0x1fe>
				case PORTD : CLR(DDRD_REG , u8_pin_copy);break;
    1214:	a1 e3       	ldi	r26, 0x31	; 49
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e1 e3       	ldi	r30, 0x31	; 49
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <DIO_voidSetpinDirection+0x1f4>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <DIO_voidSetpinDirection+0x1f0>
    1236:	80 95       	com	r24
    1238:	84 23       	and	r24, r20
    123a:	8c 93       	st	X, r24
	}
	else
	{
		/*..................*/
	}
}
    123c:	27 96       	adiw	r28, 0x07	; 7
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <DIO_u8GetpinValue>:

/********************************************************************************/
/********************************************************************************/

u8 DIO_u8GetpinValue(u8 u8_port_copy , u8 u8_pin_copy )
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <DIO_u8GetpinValue+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <DIO_u8GetpinValue+0x8>
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	8a 83       	std	Y+2, r24	; 0x02
    125e:	6b 83       	std	Y+3, r22	; 0x03
	u8 resultValue ;

	if((u8_port_copy <= PORTD)&&(u8_pin_copy <=PIN7))
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	84 30       	cpi	r24, 0x04	; 4
    1264:	08 f0       	brcs	.+2      	; 0x1268 <DIO_u8GetpinValue+0x1a>
    1266:	6e c0       	rjmp	.+220    	; 0x1344 <DIO_u8GetpinValue+0xf6>
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	88 30       	cpi	r24, 0x08	; 8
    126c:	08 f0       	brcs	.+2      	; 0x1270 <DIO_u8GetpinValue+0x22>
    126e:	6a c0       	rjmp	.+212    	; 0x1344 <DIO_u8GetpinValue+0xf6>
	{
		switch(u8_port_copy)
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3d 83       	std	Y+5, r19	; 0x05
    1278:	2c 83       	std	Y+4, r18	; 0x04
    127a:	4c 81       	ldd	r20, Y+4	; 0x04
    127c:	5d 81       	ldd	r21, Y+5	; 0x05
    127e:	41 30       	cpi	r20, 0x01	; 1
    1280:	51 05       	cpc	r21, r1
    1282:	41 f1       	breq	.+80     	; 0x12d4 <DIO_u8GetpinValue+0x86>
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	82 30       	cpi	r24, 0x02	; 2
    128a:	91 05       	cpc	r25, r1
    128c:	34 f4       	brge	.+12     	; 0x129a <DIO_u8GetpinValue+0x4c>
    128e:	2c 81       	ldd	r18, Y+4	; 0x04
    1290:	3d 81       	ldd	r19, Y+5	; 0x05
    1292:	21 15       	cp	r18, r1
    1294:	31 05       	cpc	r19, r1
    1296:	61 f0       	breq	.+24     	; 0x12b0 <DIO_u8GetpinValue+0x62>
    1298:	53 c0       	rjmp	.+166    	; 0x1340 <DIO_u8GetpinValue+0xf2>
    129a:	4c 81       	ldd	r20, Y+4	; 0x04
    129c:	5d 81       	ldd	r21, Y+5	; 0x05
    129e:	42 30       	cpi	r20, 0x02	; 2
    12a0:	51 05       	cpc	r21, r1
    12a2:	51 f1       	breq	.+84     	; 0x12f8 <DIO_u8GetpinValue+0xaa>
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	91 05       	cpc	r25, r1
    12ac:	b9 f1       	breq	.+110    	; 0x131c <DIO_u8GetpinValue+0xce>
    12ae:	48 c0       	rjmp	.+144    	; 0x1340 <DIO_u8GetpinValue+0xf2>
			{
				case PORTA : resultValue = GET(PINA_REG , u8_pin_copy);break;
    12b0:	e9 e3       	ldi	r30, 0x39	; 57
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a9 01       	movw	r20, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_u8GetpinValue+0x7a>
    12c4:	55 95       	asr	r21
    12c6:	47 95       	ror	r20
    12c8:	8a 95       	dec	r24
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_u8GetpinValue+0x76>
    12cc:	ca 01       	movw	r24, r20
    12ce:	81 70       	andi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	38 c0       	rjmp	.+112    	; 0x1344 <DIO_u8GetpinValue+0xf6>
				case PORTB : resultValue = GET(PINB_REG , u8_pin_copy);break;
    12d4:	e6 e3       	ldi	r30, 0x36	; 54
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	a9 01       	movw	r20, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_u8GetpinValue+0x9e>
    12e8:	55 95       	asr	r21
    12ea:	47 95       	ror	r20
    12ec:	8a 95       	dec	r24
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_u8GetpinValue+0x9a>
    12f0:	ca 01       	movw	r24, r20
    12f2:	81 70       	andi	r24, 0x01	; 1
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	26 c0       	rjmp	.+76     	; 0x1344 <DIO_u8GetpinValue+0xf6>
				case PORTC : resultValue = GET(PINC_REG , u8_pin_copy);break;
    12f8:	e3 e3       	ldi	r30, 0x33	; 51
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a9 01       	movw	r20, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_u8GetpinValue+0xc2>
    130c:	55 95       	asr	r21
    130e:	47 95       	ror	r20
    1310:	8a 95       	dec	r24
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_u8GetpinValue+0xbe>
    1314:	ca 01       	movw	r24, r20
    1316:	81 70       	andi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <DIO_u8GetpinValue+0xf6>
				case PORTD : resultValue = GET(PIND_REG , u8_pin_copy);break;
    131c:	e0 e3       	ldi	r30, 0x30	; 48
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a9 01       	movw	r20, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_u8GetpinValue+0xe6>
    1330:	55 95       	asr	r21
    1332:	47 95       	ror	r20
    1334:	8a 95       	dec	r24
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_u8GetpinValue+0xe2>
    1338:	ca 01       	movw	r24, r20
    133a:	81 70       	andi	r24, 0x01	; 1
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_u8GetpinValue+0xf6>
				default    : resultValue = 0xff; break;
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	89 83       	std	Y+1, r24	; 0x01
		
	}
	else
	{
		/* ERROR FOR OUT OF RANGE */
	}	 resultValue = 0xff ;
    1344:	8f ef       	ldi	r24, 0xFF	; 255
    1346:	89 83       	std	Y+1, r24	; 0x01

	return resultValue ;
    1348:	89 81       	ldd	r24, Y+1	; 0x01
}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <DIO_voidSetportDirection>:

/************************************PORT FUNCTIONS ************************/
/***************************************************************************/

void DIO_voidSetportDirection(u8 u8_port_copy , u8 u8_direction_copy)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	00 d0       	rcall	.+0      	; 0x1360 <DIO_voidSetportDirection+0x6>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <DIO_voidSetportDirection+0x8>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port_copy)
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	3c 83       	std	Y+4, r19	; 0x04
    1372:	2b 83       	std	Y+3, r18	; 0x03
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	91 05       	cpc	r25, r1
    137c:	d1 f0       	breq	.+52     	; 0x13b2 <DIO_voidSetportDirection+0x58>
    137e:	2b 81       	ldd	r18, Y+3	; 0x03
    1380:	3c 81       	ldd	r19, Y+4	; 0x04
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	2c f4       	brge	.+10     	; 0x1392 <DIO_voidSetportDirection+0x38>
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	61 f0       	breq	.+24     	; 0x13a8 <DIO_voidSetportDirection+0x4e>
    1390:	1e c0       	rjmp	.+60     	; 0x13ce <DIO_voidSetportDirection+0x74>
    1392:	2b 81       	ldd	r18, Y+3	; 0x03
    1394:	3c 81       	ldd	r19, Y+4	; 0x04
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	81 f0       	breq	.+32     	; 0x13bc <DIO_voidSetportDirection+0x62>
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	91 05       	cpc	r25, r1
    13a4:	81 f0       	breq	.+32     	; 0x13c6 <DIO_voidSetportDirection+0x6c>
    13a6:	13 c0       	rjmp	.+38     	; 0x13ce <DIO_voidSetportDirection+0x74>
	{
		case PORTA : DDRA_REG = u8_direction_copy ;break;
    13a8:	ea e3       	ldi	r30, 0x3A	; 58
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	80 83       	st	Z, r24
    13b0:	0e c0       	rjmp	.+28     	; 0x13ce <DIO_voidSetportDirection+0x74>
		case PORTB : DDRB_REG = u8_direction_copy ;break;
    13b2:	e7 e3       	ldi	r30, 0x37	; 55
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	80 83       	st	Z, r24
    13ba:	09 c0       	rjmp	.+18     	; 0x13ce <DIO_voidSetportDirection+0x74>
		case PORTC : DDRC_REG = u8_direction_copy;break;
    13bc:	e4 e3       	ldi	r30, 0x34	; 52
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	80 83       	st	Z, r24
    13c4:	04 c0       	rjmp	.+8      	; 0x13ce <DIO_voidSetportDirection+0x74>
		case PORTD : DDRD_REG = u8_direction_copy;break;
    13c6:	e1 e3       	ldi	r30, 0x31	; 49
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	80 83       	st	Z, r24
		default : break;
	}
}
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <DIO_voidSetportValue>:

/****************************************************************************/
/****************************************************************************/

void DIO_voidSetportValue(u8 u8_port_copy , u8 u8_value_copy)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <DIO_voidSetportValue+0x6>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <DIO_voidSetportValue+0x8>
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port_copy)
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	3c 83       	std	Y+4, r19	; 0x04
    13f4:	2b 83       	std	Y+3, r18	; 0x03
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	91 05       	cpc	r25, r1
    13fe:	d1 f0       	breq	.+52     	; 0x1434 <DIO_voidSetportValue+0x58>
    1400:	2b 81       	ldd	r18, Y+3	; 0x03
    1402:	3c 81       	ldd	r19, Y+4	; 0x04
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	31 05       	cpc	r19, r1
    1408:	2c f4       	brge	.+10     	; 0x1414 <DIO_voidSetportValue+0x38>
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	61 f0       	breq	.+24     	; 0x142a <DIO_voidSetportValue+0x4e>
    1412:	1e c0       	rjmp	.+60     	; 0x1450 <DIO_voidSetportValue+0x74>
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	81 f0       	breq	.+32     	; 0x143e <DIO_voidSetportValue+0x62>
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	91 05       	cpc	r25, r1
    1426:	81 f0       	breq	.+32     	; 0x1448 <DIO_voidSetportValue+0x6c>
    1428:	13 c0       	rjmp	.+38     	; 0x1450 <DIO_voidSetportValue+0x74>
	{
		case PORTA : PORTA_REG = u8_value_copy ;break;
    142a:	eb e3       	ldi	r30, 0x3B	; 59
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	80 83       	st	Z, r24
    1432:	0e c0       	rjmp	.+28     	; 0x1450 <DIO_voidSetportValue+0x74>
		case PORTB : PORTB_REG = u8_value_copy ;break;
    1434:	e8 e3       	ldi	r30, 0x38	; 56
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	80 83       	st	Z, r24
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <DIO_voidSetportValue+0x74>
		case PORTC : PORTC_REG = u8_value_copy ;break;
    143e:	e5 e3       	ldi	r30, 0x35	; 53
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	80 83       	st	Z, r24
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <DIO_voidSetportValue+0x74>
		case PORTD : PORTD_REG = u8_value_copy ;break;
    1448:	e2 e3       	ldi	r30, 0x32	; 50
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	80 83       	st	Z, r24
		default : break;
	}
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <LCD_8voidInit>:

/****************PIN FUNCTIONS ****************************************/
/**********************************************************************/

void  LCD_8voidInit(void)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	e8 97       	sbiw	r28, 0x38	; 56
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
	/* set port direction to be out */
	DIO_voidSetportDirection(PORT_DATA , PORT_OUT);
    1472:	83 e0       	ldi	r24, 0x03	; 3
    1474:	6f ef       	ldi	r22, 0xFF	; 255
    1476:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_voidSetportDirection>
	/*set control pins to be output */
	DIO_voidSetpinDirection(PORT_CONTROL , PIN5 , OUT);
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	65 e0       	ldi	r22, 0x05	; 5
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	0e 94 1f 08 	call	0x103e	; 0x103e <DIO_voidSetpinDirection>
	DIO_voidSetpinDirection(PORT_CONTROL , PIN6 , OUT);
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	66 e0       	ldi	r22, 0x06	; 6
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 1f 08 	call	0x103e	; 0x103e <DIO_voidSetpinDirection>
	DIO_voidSetpinDirection(PORT_CONTROL , PIN7 , OUT);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	67 e0       	ldi	r22, 0x07	; 7
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	0e 94 1f 08 	call	0x103e	; 0x103e <DIO_voidSetpinDirection>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	ac e0       	ldi	r26, 0x0C	; 12
    149e:	b2 e4       	ldi	r27, 0x42	; 66
    14a0:	8d ab       	std	Y+53, r24	; 0x35
    14a2:	9e ab       	std	Y+54, r25	; 0x36
    14a4:	af ab       	std	Y+55, r26	; 0x37
    14a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a8:	6d a9       	ldd	r22, Y+53	; 0x35
    14aa:	7e a9       	ldd	r23, Y+54	; 0x36
    14ac:	8f a9       	ldd	r24, Y+55	; 0x37
    14ae:	98 ad       	ldd	r25, Y+56	; 0x38
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	4a ef       	ldi	r20, 0xFA	; 250
    14b6:	54 e4       	ldi	r21, 0x44	; 68
    14b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	89 ab       	std	Y+49, r24	; 0x31
    14c2:	9a ab       	std	Y+50, r25	; 0x32
    14c4:	ab ab       	std	Y+51, r26	; 0x33
    14c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14c8:	69 a9       	ldd	r22, Y+49	; 0x31
    14ca:	7a a9       	ldd	r23, Y+50	; 0x32
    14cc:	8b a9       	ldd	r24, Y+51	; 0x33
    14ce:	9c a9       	ldd	r25, Y+52	; 0x34
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	40 e8       	ldi	r20, 0x80	; 128
    14d6:	5f e3       	ldi	r21, 0x3F	; 63
    14d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14dc:	88 23       	and	r24, r24
    14de:	2c f4       	brge	.+10     	; 0x14ea <LCD_8voidInit+0x8c>
		__ticks = 1;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	98 ab       	std	Y+48, r25	; 0x30
    14e6:	8f a7       	std	Y+47, r24	; 0x2f
    14e8:	3f c0       	rjmp	.+126    	; 0x1568 <LCD_8voidInit+0x10a>
	else if (__tmp > 65535)
    14ea:	69 a9       	ldd	r22, Y+49	; 0x31
    14ec:	7a a9       	ldd	r23, Y+50	; 0x32
    14ee:	8b a9       	ldd	r24, Y+51	; 0x33
    14f0:	9c a9       	ldd	r25, Y+52	; 0x34
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	3f ef       	ldi	r19, 0xFF	; 255
    14f6:	4f e7       	ldi	r20, 0x7F	; 127
    14f8:	57 e4       	ldi	r21, 0x47	; 71
    14fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14fe:	18 16       	cp	r1, r24
    1500:	4c f5       	brge	.+82     	; 0x1554 <LCD_8voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1502:	6d a9       	ldd	r22, Y+53	; 0x35
    1504:	7e a9       	ldd	r23, Y+54	; 0x36
    1506:	8f a9       	ldd	r24, Y+55	; 0x37
    1508:	98 ad       	ldd	r25, Y+56	; 0x38
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e2       	ldi	r20, 0x20	; 32
    1510:	51 e4       	ldi	r21, 0x41	; 65
    1512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	bc 01       	movw	r22, r24
    151c:	cd 01       	movw	r24, r26
    151e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	98 ab       	std	Y+48, r25	; 0x30
    1528:	8f a7       	std	Y+47, r24	; 0x2f
    152a:	0f c0       	rjmp	.+30     	; 0x154a <LCD_8voidInit+0xec>
    152c:	88 ec       	ldi	r24, 0xC8	; 200
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	9e a7       	std	Y+46, r25	; 0x2e
    1532:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1534:	8d a5       	ldd	r24, Y+45	; 0x2d
    1536:	9e a5       	ldd	r25, Y+46	; 0x2e
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <LCD_8voidInit+0xda>
    153c:	9e a7       	std	Y+46, r25	; 0x2e
    153e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1540:	8f a5       	ldd	r24, Y+47	; 0x2f
    1542:	98 a9       	ldd	r25, Y+48	; 0x30
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	98 ab       	std	Y+48, r25	; 0x30
    1548:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154a:	8f a5       	ldd	r24, Y+47	; 0x2f
    154c:	98 a9       	ldd	r25, Y+48	; 0x30
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	69 f7       	brne	.-38     	; 0x152c <LCD_8voidInit+0xce>
    1552:	14 c0       	rjmp	.+40     	; 0x157c <LCD_8voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1554:	69 a9       	ldd	r22, Y+49	; 0x31
    1556:	7a a9       	ldd	r23, Y+50	; 0x32
    1558:	8b a9       	ldd	r24, Y+51	; 0x33
    155a:	9c a9       	ldd	r25, Y+52	; 0x34
    155c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	98 ab       	std	Y+48, r25	; 0x30
    1566:	8f a7       	std	Y+47, r24	; 0x2f
    1568:	8f a5       	ldd	r24, Y+47	; 0x2f
    156a:	98 a9       	ldd	r25, Y+48	; 0x30
    156c:	9c a7       	std	Y+44, r25	; 0x2c
    156e:	8b a7       	std	Y+43, r24	; 0x2b
    1570:	8b a5       	ldd	r24, Y+43	; 0x2b
    1572:	9c a5       	ldd	r25, Y+44	; 0x2c
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <LCD_8voidInit+0x116>
    1578:	9c a7       	std	Y+44, r25	; 0x2c
    157a:	8b a7       	std	Y+43, r24	; 0x2b

	/* wait for 35 ms after vdd rises to 4.5 volt */
	_delay_ms(35);
	/* function set       0x38                    */
	LCD_SendCMD(0b00111000);
    157c:	88 e3       	ldi	r24, 0x38	; 56
    157e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a0 e8       	ldi	r26, 0x80	; 128
    1588:	bf e3       	ldi	r27, 0x3F	; 63
    158a:	8f a3       	std	Y+39, r24	; 0x27
    158c:	98 a7       	std	Y+40, r25	; 0x28
    158e:	a9 a7       	std	Y+41, r26	; 0x29
    1590:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1592:	6f a1       	ldd	r22, Y+39	; 0x27
    1594:	78 a5       	ldd	r23, Y+40	; 0x28
    1596:	89 a5       	ldd	r24, Y+41	; 0x29
    1598:	9a a5       	ldd	r25, Y+42	; 0x2a
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	4a ef       	ldi	r20, 0xFA	; 250
    15a0:	54 e4       	ldi	r21, 0x44	; 68
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	8b a3       	std	Y+35, r24	; 0x23
    15ac:	9c a3       	std	Y+36, r25	; 0x24
    15ae:	ad a3       	std	Y+37, r26	; 0x25
    15b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15b2:	6b a1       	ldd	r22, Y+35	; 0x23
    15b4:	7c a1       	ldd	r23, Y+36	; 0x24
    15b6:	8d a1       	ldd	r24, Y+37	; 0x25
    15b8:	9e a1       	ldd	r25, Y+38	; 0x26
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	5f e3       	ldi	r21, 0x3F	; 63
    15c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <LCD_8voidInit+0x176>
		__ticks = 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9a a3       	std	Y+34, r25	; 0x22
    15d0:	89 a3       	std	Y+33, r24	; 0x21
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <LCD_8voidInit+0x1f4>
	else if (__tmp > 65535)
    15d4:	6b a1       	ldd	r22, Y+35	; 0x23
    15d6:	7c a1       	ldd	r23, Y+36	; 0x24
    15d8:	8d a1       	ldd	r24, Y+37	; 0x25
    15da:	9e a1       	ldd	r25, Y+38	; 0x26
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	3f ef       	ldi	r19, 0xFF	; 255
    15e0:	4f e7       	ldi	r20, 0x7F	; 127
    15e2:	57 e4       	ldi	r21, 0x47	; 71
    15e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	4c f5       	brge	.+82     	; 0x163e <LCD_8voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ec:	6f a1       	ldd	r22, Y+39	; 0x27
    15ee:	78 a5       	ldd	r23, Y+40	; 0x28
    15f0:	89 a5       	ldd	r24, Y+41	; 0x29
    15f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e2       	ldi	r20, 0x20	; 32
    15fa:	51 e4       	ldi	r21, 0x41	; 65
    15fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9a a3       	std	Y+34, r25	; 0x22
    1612:	89 a3       	std	Y+33, r24	; 0x21
    1614:	0f c0       	rjmp	.+30     	; 0x1634 <LCD_8voidInit+0x1d6>
    1616:	88 ec       	ldi	r24, 0xC8	; 200
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	98 a3       	std	Y+32, r25	; 0x20
    161c:	8f 8f       	std	Y+31, r24	; 0x1f
    161e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1620:	98 a1       	ldd	r25, Y+32	; 0x20
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <LCD_8voidInit+0x1c4>
    1626:	98 a3       	std	Y+32, r25	; 0x20
    1628:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162a:	89 a1       	ldd	r24, Y+33	; 0x21
    162c:	9a a1       	ldd	r25, Y+34	; 0x22
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	9a a3       	std	Y+34, r25	; 0x22
    1632:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1634:	89 a1       	ldd	r24, Y+33	; 0x21
    1636:	9a a1       	ldd	r25, Y+34	; 0x22
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	69 f7       	brne	.-38     	; 0x1616 <LCD_8voidInit+0x1b8>
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <LCD_8voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163e:	6b a1       	ldd	r22, Y+35	; 0x23
    1640:	7c a1       	ldd	r23, Y+36	; 0x24
    1642:	8d a1       	ldd	r24, Y+37	; 0x25
    1644:	9e a1       	ldd	r25, Y+38	; 0x26
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9a a3       	std	Y+34, r25	; 0x22
    1650:	89 a3       	std	Y+33, r24	; 0x21
    1652:	89 a1       	ldd	r24, Y+33	; 0x21
    1654:	9a a1       	ldd	r25, Y+34	; 0x22
    1656:	9e 8f       	std	Y+30, r25	; 0x1e
    1658:	8d 8f       	std	Y+29, r24	; 0x1d
    165a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    165c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <LCD_8voidInit+0x200>
    1662:	9e 8f       	std	Y+30, r25	; 0x1e
    1664:	8d 8f       	std	Y+29, r24	; 0x1d
	/* wait for 1 ms                              */
	_delay_ms(1);
	/* Display ON/OFF     0x0f                    */
	LCD_SendCMD(0b00001111);
    1666:	8f e0       	ldi	r24, 0x0F	; 15
    1668:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e8       	ldi	r26, 0x80	; 128
    1672:	bf e3       	ldi	r27, 0x3F	; 63
    1674:	89 8f       	std	Y+25, r24	; 0x19
    1676:	9a 8f       	std	Y+26, r25	; 0x1a
    1678:	ab 8f       	std	Y+27, r26	; 0x1b
    167a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167c:	69 8d       	ldd	r22, Y+25	; 0x19
    167e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1682:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	4a ef       	ldi	r20, 0xFA	; 250
    168a:	54 e4       	ldi	r21, 0x44	; 68
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8d 8b       	std	Y+21, r24	; 0x15
    1696:	9e 8b       	std	Y+22, r25	; 0x16
    1698:	af 8b       	std	Y+23, r26	; 0x17
    169a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    169c:	6d 89       	ldd	r22, Y+21	; 0x15
    169e:	7e 89       	ldd	r23, Y+22	; 0x16
    16a0:	8f 89       	ldd	r24, Y+23	; 0x17
    16a2:	98 8d       	ldd	r25, Y+24	; 0x18
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	5f e3       	ldi	r21, 0x3F	; 63
    16ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16b0:	88 23       	and	r24, r24
    16b2:	2c f4       	brge	.+10     	; 0x16be <LCD_8voidInit+0x260>
		__ticks = 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9c 8b       	std	Y+20, r25	; 0x14
    16ba:	8b 8b       	std	Y+19, r24	; 0x13
    16bc:	3f c0       	rjmp	.+126    	; 0x173c <LCD_8voidInit+0x2de>
	else if (__tmp > 65535)
    16be:	6d 89       	ldd	r22, Y+21	; 0x15
    16c0:	7e 89       	ldd	r23, Y+22	; 0x16
    16c2:	8f 89       	ldd	r24, Y+23	; 0x17
    16c4:	98 8d       	ldd	r25, Y+24	; 0x18
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	57 e4       	ldi	r21, 0x47	; 71
    16ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	4c f5       	brge	.+82     	; 0x1728 <LCD_8voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	69 8d       	ldd	r22, Y+25	; 0x19
    16d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e2       	ldi	r20, 0x20	; 32
    16e4:	51 e4       	ldi	r21, 0x41	; 65
    16e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9c 8b       	std	Y+20, r25	; 0x14
    16fc:	8b 8b       	std	Y+19, r24	; 0x13
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <LCD_8voidInit+0x2c0>
    1700:	88 ec       	ldi	r24, 0xC8	; 200
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9a 8b       	std	Y+18, r25	; 0x12
    1706:	89 8b       	std	Y+17, r24	; 0x11
    1708:	89 89       	ldd	r24, Y+17	; 0x11
    170a:	9a 89       	ldd	r25, Y+18	; 0x12
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <LCD_8voidInit+0x2ae>
    1710:	9a 8b       	std	Y+18, r25	; 0x12
    1712:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1714:	8b 89       	ldd	r24, Y+19	; 0x13
    1716:	9c 89       	ldd	r25, Y+20	; 0x14
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	9c 8b       	std	Y+20, r25	; 0x14
    171c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171e:	8b 89       	ldd	r24, Y+19	; 0x13
    1720:	9c 89       	ldd	r25, Y+20	; 0x14
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	69 f7       	brne	.-38     	; 0x1700 <LCD_8voidInit+0x2a2>
    1726:	14 c0       	rjmp	.+40     	; 0x1750 <LCD_8voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1728:	6d 89       	ldd	r22, Y+21	; 0x15
    172a:	7e 89       	ldd	r23, Y+22	; 0x16
    172c:	8f 89       	ldd	r24, Y+23	; 0x17
    172e:	98 8d       	ldd	r25, Y+24	; 0x18
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9c 8b       	std	Y+20, r25	; 0x14
    173a:	8b 8b       	std	Y+19, r24	; 0x13
    173c:	8b 89       	ldd	r24, Y+19	; 0x13
    173e:	9c 89       	ldd	r25, Y+20	; 0x14
    1740:	98 8b       	std	Y+16, r25	; 0x10
    1742:	8f 87       	std	Y+15, r24	; 0x0f
    1744:	8f 85       	ldd	r24, Y+15	; 0x0f
    1746:	98 89       	ldd	r25, Y+16	; 0x10
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <LCD_8voidInit+0x2ea>
    174c:	98 8b       	std	Y+16, r25	; 0x10
    174e:	8f 87       	std	Y+15, r24	; 0x0f
	/* wait for 1 ms                              */
	_delay_ms(1);
	/* display clear      0x01                    */
	LCD_SendCMD(0b00000001);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a0 e0       	ldi	r26, 0x00	; 0
    175c:	b0 e4       	ldi	r27, 0x40	; 64
    175e:	8b 87       	std	Y+11, r24	; 0x0b
    1760:	9c 87       	std	Y+12, r25	; 0x0c
    1762:	ad 87       	std	Y+13, r26	; 0x0d
    1764:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1766:	6b 85       	ldd	r22, Y+11	; 0x0b
    1768:	7c 85       	ldd	r23, Y+12	; 0x0c
    176a:	8d 85       	ldd	r24, Y+13	; 0x0d
    176c:	9e 85       	ldd	r25, Y+14	; 0x0e
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	4a ef       	ldi	r20, 0xFA	; 250
    1774:	54 e4       	ldi	r21, 0x44	; 68
    1776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	8f 83       	std	Y+7, r24	; 0x07
    1780:	98 87       	std	Y+8, r25	; 0x08
    1782:	a9 87       	std	Y+9, r26	; 0x09
    1784:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1786:	6f 81       	ldd	r22, Y+7	; 0x07
    1788:	78 85       	ldd	r23, Y+8	; 0x08
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	9a 85       	ldd	r25, Y+10	; 0x0a
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e8       	ldi	r20, 0x80	; 128
    1794:	5f e3       	ldi	r21, 0x3F	; 63
    1796:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    179a:	88 23       	and	r24, r24
    179c:	2c f4       	brge	.+10     	; 0x17a8 <LCD_8voidInit+0x34a>
		__ticks = 1;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	3f c0       	rjmp	.+126    	; 0x1826 <LCD_8voidInit+0x3c8>
	else if (__tmp > 65535)
    17a8:	6f 81       	ldd	r22, Y+7	; 0x07
    17aa:	78 85       	ldd	r23, Y+8	; 0x08
    17ac:	89 85       	ldd	r24, Y+9	; 0x09
    17ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	3f ef       	ldi	r19, 0xFF	; 255
    17b4:	4f e7       	ldi	r20, 0x7F	; 127
    17b6:	57 e4       	ldi	r21, 0x47	; 71
    17b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17bc:	18 16       	cp	r1, r24
    17be:	4c f5       	brge	.+82     	; 0x1812 <LCD_8voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e2       	ldi	r20, 0x20	; 32
    17ce:	51 e4       	ldi	r21, 0x41	; 65
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	9e 83       	std	Y+6, r25	; 0x06
    17e6:	8d 83       	std	Y+5, r24	; 0x05
    17e8:	0f c0       	rjmp	.+30     	; 0x1808 <LCD_8voidInit+0x3aa>
    17ea:	88 ec       	ldi	r24, 0xC8	; 200
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	9c 83       	std	Y+4, r25	; 0x04
    17f0:	8b 83       	std	Y+3, r24	; 0x03
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <LCD_8voidInit+0x398>
    17fa:	9c 83       	std	Y+4, r25	; 0x04
    17fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	69 f7       	brne	.-38     	; 0x17ea <LCD_8voidInit+0x38c>
    1810:	14 c0       	rjmp	.+40     	; 0x183a <LCD_8voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1812:	6f 81       	ldd	r22, Y+7	; 0x07
    1814:	78 85       	ldd	r23, Y+8	; 0x08
    1816:	89 85       	ldd	r24, Y+9	; 0x09
    1818:	9a 85       	ldd	r25, Y+10	; 0x0a
    181a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	9e 83       	std	Y+6, r25	; 0x06
    1824:	8d 83       	std	Y+5, r24	; 0x05
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	9e 81       	ldd	r25, Y+6	; 0x06
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <LCD_8voidInit+0x3d4>
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
	/* wait for 1 ms                              */
	_delay_ms(2);
	/* Entry mode         0x06                    */
	LCD_SendCMD(0b00000110);
    183a:	86 e0       	ldi	r24, 0x06	; 6
    183c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
	/* End of initialisation                      */

}
    1840:	e8 96       	adiw	r28, 0x38	; 56
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <LCD_4voidInit>:

/**********************************************************************/
/**********************************************************************/

void  LCD_4voidInit(void)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	e8 97       	sbiw	r28, 0x38	; 56
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	ac e0       	ldi	r26, 0x0C	; 12
    186c:	b2 e4       	ldi	r27, 0x42	; 66
    186e:	8d ab       	std	Y+53, r24	; 0x35
    1870:	9e ab       	std	Y+54, r25	; 0x36
    1872:	af ab       	std	Y+55, r26	; 0x37
    1874:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1876:	6d a9       	ldd	r22, Y+53	; 0x35
    1878:	7e a9       	ldd	r23, Y+54	; 0x36
    187a:	8f a9       	ldd	r24, Y+55	; 0x37
    187c:	98 ad       	ldd	r25, Y+56	; 0x38
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	4a ef       	ldi	r20, 0xFA	; 250
    1884:	54 e4       	ldi	r21, 0x44	; 68
    1886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	89 ab       	std	Y+49, r24	; 0x31
    1890:	9a ab       	std	Y+50, r25	; 0x32
    1892:	ab ab       	std	Y+51, r26	; 0x33
    1894:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1896:	69 a9       	ldd	r22, Y+49	; 0x31
    1898:	7a a9       	ldd	r23, Y+50	; 0x32
    189a:	8b a9       	ldd	r24, Y+51	; 0x33
    189c:	9c a9       	ldd	r25, Y+52	; 0x34
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e8       	ldi	r20, 0x80	; 128
    18a4:	5f e3       	ldi	r21, 0x3F	; 63
    18a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18aa:	88 23       	and	r24, r24
    18ac:	2c f4       	brge	.+10     	; 0x18b8 <LCD_4voidInit+0x66>
		__ticks = 1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	98 ab       	std	Y+48, r25	; 0x30
    18b4:	8f a7       	std	Y+47, r24	; 0x2f
    18b6:	3f c0       	rjmp	.+126    	; 0x1936 <LCD_4voidInit+0xe4>
	else if (__tmp > 65535)
    18b8:	69 a9       	ldd	r22, Y+49	; 0x31
    18ba:	7a a9       	ldd	r23, Y+50	; 0x32
    18bc:	8b a9       	ldd	r24, Y+51	; 0x33
    18be:	9c a9       	ldd	r25, Y+52	; 0x34
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	3f ef       	ldi	r19, 0xFF	; 255
    18c4:	4f e7       	ldi	r20, 0x7F	; 127
    18c6:	57 e4       	ldi	r21, 0x47	; 71
    18c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18cc:	18 16       	cp	r1, r24
    18ce:	4c f5       	brge	.+82     	; 0x1922 <LCD_4voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d0:	6d a9       	ldd	r22, Y+53	; 0x35
    18d2:	7e a9       	ldd	r23, Y+54	; 0x36
    18d4:	8f a9       	ldd	r24, Y+55	; 0x37
    18d6:	98 ad       	ldd	r25, Y+56	; 0x38
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e2       	ldi	r20, 0x20	; 32
    18de:	51 e4       	ldi	r21, 0x41	; 65
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	bc 01       	movw	r22, r24
    18ea:	cd 01       	movw	r24, r26
    18ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	98 ab       	std	Y+48, r25	; 0x30
    18f6:	8f a7       	std	Y+47, r24	; 0x2f
    18f8:	0f c0       	rjmp	.+30     	; 0x1918 <LCD_4voidInit+0xc6>
    18fa:	88 ec       	ldi	r24, 0xC8	; 200
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9e a7       	std	Y+46, r25	; 0x2e
    1900:	8d a7       	std	Y+45, r24	; 0x2d
    1902:	8d a5       	ldd	r24, Y+45	; 0x2d
    1904:	9e a5       	ldd	r25, Y+46	; 0x2e
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <LCD_4voidInit+0xb4>
    190a:	9e a7       	std	Y+46, r25	; 0x2e
    190c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1910:	98 a9       	ldd	r25, Y+48	; 0x30
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	98 ab       	std	Y+48, r25	; 0x30
    1916:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1918:	8f a5       	ldd	r24, Y+47	; 0x2f
    191a:	98 a9       	ldd	r25, Y+48	; 0x30
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	69 f7       	brne	.-38     	; 0x18fa <LCD_4voidInit+0xa8>
    1920:	14 c0       	rjmp	.+40     	; 0x194a <LCD_4voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1922:	69 a9       	ldd	r22, Y+49	; 0x31
    1924:	7a a9       	ldd	r23, Y+50	; 0x32
    1926:	8b a9       	ldd	r24, Y+51	; 0x33
    1928:	9c a9       	ldd	r25, Y+52	; 0x34
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	98 ab       	std	Y+48, r25	; 0x30
    1934:	8f a7       	std	Y+47, r24	; 0x2f
    1936:	8f a5       	ldd	r24, Y+47	; 0x2f
    1938:	98 a9       	ldd	r25, Y+48	; 0x30
    193a:	9c a7       	std	Y+44, r25	; 0x2c
    193c:	8b a7       	std	Y+43, r24	; 0x2b
    193e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1940:	9c a5       	ldd	r25, Y+44	; 0x2c
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_4voidInit+0xf0>
    1946:	9c a7       	std	Y+44, r25	; 0x2c
    1948:	8b a7       	std	Y+43, r24	; 0x2b
	/* wait for 35 ms after vdd rises to 4.5 volt */
	_delay_ms(35);
	/* function set       0x38                    */
	LCD_SendCMD(0b10100000);
    194a:	80 ea       	ldi	r24, 0xA0	; 160
    194c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a0 e8       	ldi	r26, 0x80	; 128
    1956:	bf e3       	ldi	r27, 0x3F	; 63
    1958:	8f a3       	std	Y+39, r24	; 0x27
    195a:	98 a7       	std	Y+40, r25	; 0x28
    195c:	a9 a7       	std	Y+41, r26	; 0x29
    195e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1960:	6f a1       	ldd	r22, Y+39	; 0x27
    1962:	78 a5       	ldd	r23, Y+40	; 0x28
    1964:	89 a5       	ldd	r24, Y+41	; 0x29
    1966:	9a a5       	ldd	r25, Y+42	; 0x2a
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a ef       	ldi	r20, 0xFA	; 250
    196e:	54 e4       	ldi	r21, 0x44	; 68
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8b a3       	std	Y+35, r24	; 0x23
    197a:	9c a3       	std	Y+36, r25	; 0x24
    197c:	ad a3       	std	Y+37, r26	; 0x25
    197e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1980:	6b a1       	ldd	r22, Y+35	; 0x23
    1982:	7c a1       	ldd	r23, Y+36	; 0x24
    1984:	8d a1       	ldd	r24, Y+37	; 0x25
    1986:	9e a1       	ldd	r25, Y+38	; 0x26
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1994:	88 23       	and	r24, r24
    1996:	2c f4       	brge	.+10     	; 0x19a2 <LCD_4voidInit+0x150>
		__ticks = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9a a3       	std	Y+34, r25	; 0x22
    199e:	89 a3       	std	Y+33, r24	; 0x21
    19a0:	3f c0       	rjmp	.+126    	; 0x1a20 <LCD_4voidInit+0x1ce>
	else if (__tmp > 65535)
    19a2:	6b a1       	ldd	r22, Y+35	; 0x23
    19a4:	7c a1       	ldd	r23, Y+36	; 0x24
    19a6:	8d a1       	ldd	r24, Y+37	; 0x25
    19a8:	9e a1       	ldd	r25, Y+38	; 0x26
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	4c f5       	brge	.+82     	; 0x1a0c <LCD_4voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	6f a1       	ldd	r22, Y+39	; 0x27
    19bc:	78 a5       	ldd	r23, Y+40	; 0x28
    19be:	89 a5       	ldd	r24, Y+41	; 0x29
    19c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9a a3       	std	Y+34, r25	; 0x22
    19e0:	89 a3       	std	Y+33, r24	; 0x21
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <LCD_4voidInit+0x1b0>
    19e4:	88 ec       	ldi	r24, 0xC8	; 200
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	98 a3       	std	Y+32, r25	; 0x20
    19ea:	8f 8f       	std	Y+31, r24	; 0x1f
    19ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19ee:	98 a1       	ldd	r25, Y+32	; 0x20
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <LCD_4voidInit+0x19e>
    19f4:	98 a3       	std	Y+32, r25	; 0x20
    19f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	89 a1       	ldd	r24, Y+33	; 0x21
    19fa:	9a a1       	ldd	r25, Y+34	; 0x22
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	9a a3       	std	Y+34, r25	; 0x22
    1a00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	89 a1       	ldd	r24, Y+33	; 0x21
    1a04:	9a a1       	ldd	r25, Y+34	; 0x22
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <LCD_4voidInit+0x192>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <LCD_4voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a10:	8d a1       	ldd	r24, Y+37	; 0x25
    1a12:	9e a1       	ldd	r25, Y+38	; 0x26
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9a a3       	std	Y+34, r25	; 0x22
    1a1e:	89 a3       	std	Y+33, r24	; 0x21
    1a20:	89 a1       	ldd	r24, Y+33	; 0x21
    1a22:	9a a1       	ldd	r25, Y+34	; 0x22
    1a24:	9e 8f       	std	Y+30, r25	; 0x1e
    1a26:	8d 8f       	std	Y+29, r24	; 0x1d
    1a28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_4voidInit+0x1da>
    1a30:	9e 8f       	std	Y+30, r25	; 0x1e
    1a32:	8d 8f       	std	Y+29, r24	; 0x1d
	/* wait for 1 ms                              */
	_delay_ms(1);
	/* Display ON/OFF     0x0f                    */
	LCD_SendCMD(0b11110000);
    1a34:	80 ef       	ldi	r24, 0xF0	; 240
    1a36:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e8       	ldi	r26, 0x80	; 128
    1a40:	bf e3       	ldi	r27, 0x3F	; 63
    1a42:	89 8f       	std	Y+25, r24	; 0x19
    1a44:	9a 8f       	std	Y+26, r25	; 0x1a
    1a46:	ab 8f       	std	Y+27, r26	; 0x1b
    1a48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	4a ef       	ldi	r20, 0xFA	; 250
    1a58:	54 e4       	ldi	r21, 0x44	; 68
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8d 8b       	std	Y+21, r24	; 0x15
    1a64:	9e 8b       	std	Y+22, r25	; 0x16
    1a66:	af 8b       	std	Y+23, r26	; 0x17
    1a68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a70:	98 8d       	ldd	r25, Y+24	; 0x18
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <LCD_4voidInit+0x23a>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9c 8b       	std	Y+20, r25	; 0x14
    1a88:	8b 8b       	std	Y+19, r24	; 0x13
    1a8a:	3f c0       	rjmp	.+126    	; 0x1b0a <LCD_4voidInit+0x2b8>
	else if (__tmp > 65535)
    1a8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a90:	8f 89       	ldd	r24, Y+23	; 0x17
    1a92:	98 8d       	ldd	r25, Y+24	; 0x18
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	3f ef       	ldi	r19, 0xFF	; 255
    1a98:	4f e7       	ldi	r20, 0x7F	; 127
    1a9a:	57 e4       	ldi	r21, 0x47	; 71
    1a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa0:	18 16       	cp	r1, r24
    1aa2:	4c f5       	brge	.+82     	; 0x1af6 <LCD_4voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa4:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e2       	ldi	r20, 0x20	; 32
    1ab2:	51 e4       	ldi	r21, 0x41	; 65
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9c 8b       	std	Y+20, r25	; 0x14
    1aca:	8b 8b       	std	Y+19, r24	; 0x13
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <LCD_4voidInit+0x29a>
    1ace:	88 ec       	ldi	r24, 0xC8	; 200
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9a 8b       	std	Y+18, r25	; 0x12
    1ad4:	89 8b       	std	Y+17, r24	; 0x11
    1ad6:	89 89       	ldd	r24, Y+17	; 0x11
    1ad8:	9a 89       	ldd	r25, Y+18	; 0x12
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_4voidInit+0x288>
    1ade:	9a 8b       	std	Y+18, r25	; 0x12
    1ae0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	9c 8b       	std	Y+20, r25	; 0x14
    1aea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aec:	8b 89       	ldd	r24, Y+19	; 0x13
    1aee:	9c 89       	ldd	r25, Y+20	; 0x14
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	69 f7       	brne	.-38     	; 0x1ace <LCD_4voidInit+0x27c>
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <LCD_4voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	6d 89       	ldd	r22, Y+21	; 0x15
    1af8:	7e 89       	ldd	r23, Y+22	; 0x16
    1afa:	8f 89       	ldd	r24, Y+23	; 0x17
    1afc:	98 8d       	ldd	r25, Y+24	; 0x18
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9c 8b       	std	Y+20, r25	; 0x14
    1b08:	8b 8b       	std	Y+19, r24	; 0x13
    1b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0e:	98 8b       	std	Y+16, r25	; 0x10
    1b10:	8f 87       	std	Y+15, r24	; 0x0f
    1b12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b14:	98 89       	ldd	r25, Y+16	; 0x10
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_4voidInit+0x2c4>
    1b1a:	98 8b       	std	Y+16, r25	; 0x10
    1b1c:	8f 87       	std	Y+15, r24	; 0x0f
	/* wait for 1 ms                              */
	_delay_ms(1);
	/* display clear      0x01                    */
	LCD_SendCMD(0b00010000);
    1b1e:	80 e1       	ldi	r24, 0x10	; 16
    1b20:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a0 e0       	ldi	r26, 0x00	; 0
    1b2a:	b0 e4       	ldi	r27, 0x40	; 64
    1b2c:	8b 87       	std	Y+11, r24	; 0x0b
    1b2e:	9c 87       	std	Y+12, r25	; 0x0c
    1b30:	ad 87       	std	Y+13, r26	; 0x0d
    1b32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4a ef       	ldi	r20, 0xFA	; 250
    1b42:	54 e4       	ldi	r21, 0x44	; 68
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8f 83       	std	Y+7, r24	; 0x07
    1b4e:	98 87       	std	Y+8, r25	; 0x08
    1b50:	a9 87       	std	Y+9, r26	; 0x09
    1b52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <LCD_4voidInit+0x324>
		__ticks = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	3f c0       	rjmp	.+126    	; 0x1bf4 <LCD_4voidInit+0x3a2>
	else if (__tmp > 65535)
    1b76:	6f 81       	ldd	r22, Y+7	; 0x07
    1b78:	78 85       	ldd	r23, Y+8	; 0x08
    1b7a:	89 85       	ldd	r24, Y+9	; 0x09
    1b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	3f ef       	ldi	r19, 0xFF	; 255
    1b82:	4f e7       	ldi	r20, 0x7F	; 127
    1b84:	57 e4       	ldi	r21, 0x47	; 71
    1b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b8a:	18 16       	cp	r1, r24
    1b8c:	4c f5       	brge	.+82     	; 0x1be0 <LCD_4voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e2       	ldi	r20, 0x20	; 32
    1b9c:	51 e4       	ldi	r21, 0x41	; 65
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	0f c0       	rjmp	.+30     	; 0x1bd6 <LCD_4voidInit+0x384>
    1bb8:	88 ec       	ldi	r24, 0xC8	; 200
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_4voidInit+0x372>
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
    1bca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	69 f7       	brne	.-38     	; 0x1bb8 <LCD_4voidInit+0x366>
    1bde:	14 c0       	rjmp	.+40     	; 0x1c08 <LCD_4voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be0:	6f 81       	ldd	r22, Y+7	; 0x07
    1be2:	78 85       	ldd	r23, Y+8	; 0x08
    1be4:	89 85       	ldd	r24, Y+9	; 0x09
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LCD_4voidInit+0x3ae>
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
	/* wait for 1 ms                              */
	_delay_ms(2);
	/* Entry mode         0x06                    */
	LCD_SendCMD(0b01100000);
    1c08:	80 e6       	ldi	r24, 0x60	; 96
    1c0a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
	/* End of initialisation                      */

}
    1c0e:	e8 96       	adiw	r28, 0x38	; 56
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <LCD_SendCMD>:
/**********************************************************************/
/**********************************************************************/

void  LCD_SendCMD(u8 u8Cmd_copy )
{ 
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	2f 97       	sbiw	r28, 0x0f	; 15
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	8f 87       	std	Y+15, r24	; 0x0f
	/* 1-RS PIN =low     which means send command              */
	DIO_voidSetpinValue(PORT_CONTROL , RS_PIN , 0 );
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	67 e0       	ldi	r22, 0x07	; 7
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetpinValue>
	/* 2-RW PIN =low     which means write command             */
	DIO_voidSetpinValue(PORT_CONTROL , RW_PIN , 0 );
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	66 e0       	ldi	r22, 0x06	; 6
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetpinValue>
	/* 3-send command on the bus                               */
	DIO_voidSetportValue(PORT_DATA , u8Cmd_copy);
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c4e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_voidSetportValue>
	/* 4-EN PIN =HIGH then LOW     which means ENABLE LATCH    */
	DIO_voidSetpinValue(PORT_CONTROL , EN_PIN , 1 );
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	65 e0       	ldi	r22, 0x05	; 5
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetpinValue>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	a0 e8       	ldi	r26, 0x80	; 128
    1c62:	bf e3       	ldi	r27, 0x3F	; 63
    1c64:	8b 87       	std	Y+11, r24	; 0x0b
    1c66:	9c 87       	std	Y+12, r25	; 0x0c
    1c68:	ad 87       	std	Y+13, r26	; 0x0d
    1c6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	4a ef       	ldi	r20, 0xFA	; 250
    1c7a:	54 e4       	ldi	r21, 0x44	; 68
    1c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	8f 83       	std	Y+7, r24	; 0x07
    1c86:	98 87       	std	Y+8, r25	; 0x08
    1c88:	a9 87       	std	Y+9, r26	; 0x09
    1c8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e8       	ldi	r20, 0x80	; 128
    1c9a:	5f e3       	ldi	r21, 0x3F	; 63
    1c9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca0:	88 23       	and	r24, r24
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <LCD_SendCMD+0x8e>
		__ticks = 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
    1cac:	3f c0       	rjmp	.+126    	; 0x1d2c <LCD_SendCMD+0x10c>
	else if (__tmp > 65535)
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	3f ef       	ldi	r19, 0xFF	; 255
    1cba:	4f e7       	ldi	r20, 0x7F	; 127
    1cbc:	57 e4       	ldi	r21, 0x47	; 71
    1cbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	4c f5       	brge	.+82     	; 0x1d18 <LCD_SendCMD+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	51 e4       	ldi	r21, 0x41	; 65
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	0f c0       	rjmp	.+30     	; 0x1d0e <LCD_SendCMD+0xee>
    1cf0:	88 ec       	ldi	r24, 0xC8	; 200
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <LCD_SendCMD+0xdc>
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	9e 81       	ldd	r25, Y+6	; 0x06
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	69 f7       	brne	.-38     	; 0x1cf0 <LCD_SendCMD+0xd0>
    1d16:	14 c0       	rjmp	.+40     	; 0x1d40 <LCD_SendCMD+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <LCD_SendCMD+0x118>
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetpinValue(PORT_CONTROL , EN_PIN , 0 );
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	65 e0       	ldi	r22, 0x05	; 5
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetpinValue>

}
    1d4a:	2f 96       	adiw	r28, 0x0f	; 15
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <LCD_WriteData>:

/***********************************************************************/
/***********************************************************************/

void  LCD_WriteData(u8 u8Data_copy )
{ 
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	2f 97       	sbiw	r28, 0x0f	; 15
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	8f 87       	std	Y+15, r24	; 0x0f
	/* 1-RS PIN =HIGH     which means send DATA                */
	DIO_voidSetpinValue(PORT_CONTROL , RS_PIN , 1 );
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	67 e0       	ldi	r22, 0x07	; 7
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetpinValue>
	/* 2-RW PIN =low     which means write DATA                */
	DIO_voidSetpinValue(PORT_CONTROL , RW_PIN , 0 );
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	66 e0       	ldi	r22, 0x06	; 6
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetpinValue>
	/* 3-send command on the bus                               */
	DIO_voidSetportValue(PORT_DATA , u8Data_copy);
    1d86:	83 e0       	ldi	r24, 0x03	; 3
    1d88:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d8a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_voidSetportValue>
	/* 4-EN PIN =HIGH then LOW     which means ENABLE LATCH    */
	DIO_voidSetpinValue(PORT_CONTROL , EN_PIN , 1 );
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	65 e0       	ldi	r22, 0x05	; 5
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetpinValue>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e8       	ldi	r26, 0x80	; 128
    1d9e:	bf e3       	ldi	r27, 0x3F	; 63
    1da0:	8b 87       	std	Y+11, r24	; 0x0b
    1da2:	9c 87       	std	Y+12, r25	; 0x0c
    1da4:	ad 87       	std	Y+13, r26	; 0x0d
    1da6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1daa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a ef       	ldi	r20, 0xFA	; 250
    1db6:	54 e4       	ldi	r21, 0x44	; 68
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	8f 83       	std	Y+7, r24	; 0x07
    1dc2:	98 87       	std	Y+8, r25	; 0x08
    1dc4:	a9 87       	std	Y+9, r26	; 0x09
    1dc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dca:	78 85       	ldd	r23, Y+8	; 0x08
    1dcc:	89 85       	ldd	r24, Y+9	; 0x09
    1dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	2c f4       	brge	.+10     	; 0x1dea <LCD_WriteData+0x8e>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9e 83       	std	Y+6, r25	; 0x06
    1de6:	8d 83       	std	Y+5, r24	; 0x05
    1de8:	3f c0       	rjmp	.+126    	; 0x1e68 <LCD_WriteData+0x10c>
	else if (__tmp > 65535)
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	4c f5       	brge	.+82     	; 0x1e54 <LCD_WriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e2       	ldi	r20, 0x20	; 32
    1e10:	51 e4       	ldi	r21, 0x41	; 65
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9e 83       	std	Y+6, r25	; 0x06
    1e28:	8d 83       	std	Y+5, r24	; 0x05
    1e2a:	0f c0       	rjmp	.+30     	; 0x1e4a <LCD_WriteData+0xee>
    1e2c:	88 ec       	ldi	r24, 0xC8	; 200
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9c 83       	std	Y+4, r25	; 0x04
    1e32:	8b 83       	std	Y+3, r24	; 0x03
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <LCD_WriteData+0xdc>
    1e3c:	9c 83       	std	Y+4, r25	; 0x04
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <LCD_WriteData+0xd0>
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <LCD_WriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e54:	6f 81       	ldd	r22, Y+7	; 0x07
    1e56:	78 85       	ldd	r23, Y+8	; 0x08
    1e58:	89 85       	ldd	r24, Y+9	; 0x09
    1e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	9a 83       	std	Y+2, r25	; 0x02
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_WriteData+0x118>
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetpinValue(PORT_CONTROL , EN_PIN , 0 );
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	65 e0       	ldi	r22, 0x05	; 5
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetpinValue>

}
    1e86:	2f 96       	adiw	r28, 0x0f	; 15
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <LCD_voidWriteString>:

/***********************************************************************/
/***********************************************************************/

void LCD_voidWriteString(u8 * u8ptr_copy)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <LCD_voidWriteString+0x6>
    1e9e:	0f 92       	push	r0
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	9b 83       	std	Y+3, r25	; 0x03
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
    1eaa:	0e c0       	rjmp	.+28     	; 0x1ec8 <LCD_voidWriteString+0x30>
	while(u8ptr_copy[i] != '\0')
	{
		LCD_WriteData(u8ptr_copy[i]);
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	e2 0f       	add	r30, r18
    1eba:	f3 1f       	adc	r31, r19
    1ebc:	80 81       	ld	r24, Z
    1ebe:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_WriteData>
		i++;
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	8f 5f       	subi	r24, 0xFF	; 255
    1ec6:	89 83       	std	Y+1, r24	; 0x01
/***********************************************************************/

void LCD_voidWriteString(u8 * u8ptr_copy)
{
	u8 i=0;
	while(u8ptr_copy[i] != '\0')
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	e2 0f       	add	r30, r18
    1ed6:	f3 1f       	adc	r31, r19
    1ed8:	80 81       	ld	r24, Z
    1eda:	88 23       	and	r24, r24
    1edc:	39 f7       	brne	.-50     	; 0x1eac <LCD_voidWriteString+0x14>
	{
		LCD_WriteData(u8ptr_copy[i]);
		i++;
	}
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <LCD_voidGotoXY>:
/***********************************************************************/
/***********************************************************************/


void LCD_voidGotoXY(u8 x , u8 y)
{
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <LCD_voidGotoXY+0x6>
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	6a 83       	std	Y+2, r22	; 0x02
	if(x==0)
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	88 23       	and	r24, r24
    1efc:	29 f4       	brne	.+10     	; 0x1f08 <LCD_voidGotoXY+0x1e>
	{
		LCD_SendCMD(0x80+y);
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	80 58       	subi	r24, 0x80	; 128
    1f02:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
    1f06:	07 c0       	rjmp	.+14     	; 0x1f16 <LCD_voidGotoXY+0x2c>
	}
	else if(x==1)
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	21 f4       	brne	.+8      	; 0x1f16 <LCD_voidGotoXY+0x2c>
	{
		LCD_SendCMD(0xc0+y);
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	80 54       	subi	r24, 0x40	; 64
    1f12:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
	}
}
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <power>:

/***********************************************************************/
/***********************************************************************/

int power(int a,int b)
{
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	28 97       	sbiw	r28, 0x08	; 8
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	78 87       	std	Y+8, r23	; 0x08
    1f3a:	6f 83       	std	Y+7, r22	; 0x07
	int i=1 ,res=1;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9c 83       	std	Y+4, r25	; 0x04
    1f42:	8b 83       	std	Y+3, r24	; 0x03
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01
	for(i=1;i<=b;i++)
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	9c 83       	std	Y+4, r25	; 0x04
    1f52:	8b 83       	std	Y+3, r24	; 0x03
    1f54:	13 c0       	rjmp	.+38     	; 0x1f7c <power+0x5c>
	{
		res*=a;
    1f56:	29 81       	ldd	r18, Y+1	; 0x01
    1f58:	3a 81       	ldd	r19, Y+2	; 0x02
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	ac 01       	movw	r20, r24
    1f60:	24 9f       	mul	r18, r20
    1f62:	c0 01       	movw	r24, r0
    1f64:	25 9f       	mul	r18, r21
    1f66:	90 0d       	add	r25, r0
    1f68:	34 9f       	mul	r19, r20
    1f6a:	90 0d       	add	r25, r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	9a 83       	std	Y+2, r25	; 0x02
    1f70:	89 83       	std	Y+1, r24	; 0x01
/***********************************************************************/

int power(int a,int b)
{
	int i=1 ,res=1;
	for(i=1;i<=b;i++)
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	01 96       	adiw	r24, 0x01	; 1
    1f78:	9c 83       	std	Y+4, r25	; 0x04
    1f7a:	8b 83       	std	Y+3, r24	; 0x03
    1f7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f80:	8f 81       	ldd	r24, Y+7	; 0x07
    1f82:	98 85       	ldd	r25, Y+8	; 0x08
    1f84:	82 17       	cp	r24, r18
    1f86:	93 07       	cpc	r25, r19
    1f88:	34 f7       	brge	.-52     	; 0x1f56 <power+0x36>
	{
		res*=a;
	}
	return res;
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f8e:	28 96       	adiw	r28, 0x08	; 8
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <LCD_WriteNum>:


void LCD_WriteNum(s32 u16Num_copy)
{
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	2f 97       	sbiw	r28, 0x0f	; 15
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	6c 87       	std	Y+12, r22	; 0x0c
    1fbe:	7d 87       	std	Y+13, r23	; 0x0d
    1fc0:	8e 87       	std	Y+14, r24	; 0x0e
    1fc2:	9f 87       	std	Y+15, r25	; 0x0f
	s32 temp = u16Num_copy ,reverse_num =0 ;
    1fc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fc6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fc8:	ae 85       	ldd	r26, Y+14	; 0x0e
    1fca:	bf 85       	ldd	r27, Y+15	; 0x0f
    1fcc:	88 87       	std	Y+8, r24	; 0x08
    1fce:	99 87       	std	Y+9, r25	; 0x09
    1fd0:	aa 87       	std	Y+10, r26	; 0x0a
    1fd2:	bb 87       	std	Y+11, r27	; 0x0b
    1fd4:	1c 82       	std	Y+4, r1	; 0x04
    1fd6:	1d 82       	std	Y+5, r1	; 0x05
    1fd8:	1e 82       	std	Y+6, r1	; 0x06
    1fda:	1f 82       	std	Y+7, r1	; 0x07
	s8 i, size =0  ,zeros= 0 ;
    1fdc:	1a 82       	std	Y+2, r1	; 0x02
    1fde:	19 82       	std	Y+1, r1	; 0x01
    1fe0:	15 c0       	rjmp	.+42     	; 0x200c <LCD_WriteNum+0x6c>
	while(u16Num_copy != 0)
	{
		size += 1;
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	8a 83       	std	Y+2, r24	; 0x02
		u16Num_copy /= 10 ;
    1fe8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fea:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fec:	ae 85       	ldd	r26, Y+14	; 0x0e
    1fee:	bf 85       	ldd	r27, Y+15	; 0x0f
    1ff0:	2a e0       	ldi	r18, 0x0A	; 10
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e0       	ldi	r20, 0x00	; 0
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	bc 01       	movw	r22, r24
    1ffa:	cd 01       	movw	r24, r26
    1ffc:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divmodsi4>
    2000:	da 01       	movw	r26, r20
    2002:	c9 01       	movw	r24, r18
    2004:	8c 87       	std	Y+12, r24	; 0x0c
    2006:	9d 87       	std	Y+13, r25	; 0x0d
    2008:	ae 87       	std	Y+14, r26	; 0x0e
    200a:	bf 87       	std	Y+15, r27	; 0x0f

void LCD_WriteNum(s32 u16Num_copy)
{
	s32 temp = u16Num_copy ,reverse_num =0 ;
	s8 i, size =0  ,zeros= 0 ;
	while(u16Num_copy != 0)
    200c:	8c 85       	ldd	r24, Y+12	; 0x0c
    200e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2010:	ae 85       	ldd	r26, Y+14	; 0x0e
    2012:	bf 85       	ldd	r27, Y+15	; 0x0f
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	a1 05       	cpc	r26, r1
    2018:	b1 05       	cpc	r27, r1
    201a:	19 f7       	brne	.-58     	; 0x1fe2 <LCD_WriteNum+0x42>
	{
		size += 1;
		u16Num_copy /= 10 ;
	}
	u16Num_copy =temp ;
    201c:	88 85       	ldd	r24, Y+8	; 0x08
    201e:	99 85       	ldd	r25, Y+9	; 0x09
    2020:	aa 85       	ldd	r26, Y+10	; 0x0a
    2022:	bb 85       	ldd	r27, Y+11	; 0x0b
    2024:	8c 87       	std	Y+12, r24	; 0x0c
    2026:	9d 87       	std	Y+13, r25	; 0x0d
    2028:	ae 87       	std	Y+14, r26	; 0x0e
    202a:	bf 87       	std	Y+15, r27	; 0x0f

	if(((u16Num_copy % 10) == 0))
    202c:	8c 85       	ldd	r24, Y+12	; 0x0c
    202e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2030:	ae 85       	ldd	r26, Y+14	; 0x0e
    2032:	bf 85       	ldd	r27, Y+15	; 0x0f
    2034:	2a e0       	ldi	r18, 0x0A	; 10
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e0       	ldi	r20, 0x00	; 0
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divmodsi4>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	a1 05       	cpc	r26, r1
    204c:	b1 05       	cpc	r27, r1
    204e:	11 f4       	brne	.+4      	; 0x2054 <LCD_WriteNum+0xb4>
	{ zeros =1 ;}
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	89 83       	std	Y+1, r24	; 0x01
	if(((u16Num_copy % 100000000) == 0))
	{ zeros =8 ;}
	if(((u16Num_copy % 1000000000) == 0))
	{ zeros =9 ;}
*/
	for(i=size ; i > 0; i--)
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	8b 83       	std	Y+3, r24	; 0x03
    2058:	48 c0       	rjmp	.+144    	; 0x20ea <LCD_WriteNum+0x14a>
	{
		reverse_num += ((u16Num_copy % 10) * (power(10,i-1)));
    205a:	8c 85       	ldd	r24, Y+12	; 0x0c
    205c:	9d 85       	ldd	r25, Y+13	; 0x0d
    205e:	ae 85       	ldd	r26, Y+14	; 0x0e
    2060:	bf 85       	ldd	r27, Y+15	; 0x0f
    2062:	2a e0       	ldi	r18, 0x0A	; 10
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	50 e0       	ldi	r21, 0x00	; 0
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divmodsi4>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	7c 01       	movw	r14, r24
    2078:	8d 01       	movw	r16, r26
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	99 27       	eor	r25, r25
    207e:	87 fd       	sbrc	r24, 7
    2080:	90 95       	com	r25
    2082:	9c 01       	movw	r18, r24
    2084:	21 50       	subi	r18, 0x01	; 1
    2086:	30 40       	sbci	r19, 0x00	; 0
    2088:	8a e0       	ldi	r24, 0x0A	; 10
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	b9 01       	movw	r22, r18
    208e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <power>
    2092:	9c 01       	movw	r18, r24
    2094:	44 27       	eor	r20, r20
    2096:	37 fd       	sbrc	r19, 7
    2098:	40 95       	com	r20
    209a:	54 2f       	mov	r21, r20
    209c:	c8 01       	movw	r24, r16
    209e:	b7 01       	movw	r22, r14
    20a0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <__mulsi3>
    20a4:	9b 01       	movw	r18, r22
    20a6:	ac 01       	movw	r20, r24
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	9d 81       	ldd	r25, Y+5	; 0x05
    20ac:	ae 81       	ldd	r26, Y+6	; 0x06
    20ae:	bf 81       	ldd	r27, Y+7	; 0x07
    20b0:	82 0f       	add	r24, r18
    20b2:	93 1f       	adc	r25, r19
    20b4:	a4 1f       	adc	r26, r20
    20b6:	b5 1f       	adc	r27, r21
    20b8:	8c 83       	std	Y+4, r24	; 0x04
    20ba:	9d 83       	std	Y+5, r25	; 0x05
    20bc:	ae 83       	std	Y+6, r26	; 0x06
    20be:	bf 83       	std	Y+7, r27	; 0x07
		u16Num_copy /= 10 ;
    20c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    20c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    20c4:	ae 85       	ldd	r26, Y+14	; 0x0e
    20c6:	bf 85       	ldd	r27, Y+15	; 0x0f
    20c8:	2a e0       	ldi	r18, 0x0A	; 10
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divmodsi4>
    20d8:	da 01       	movw	r26, r20
    20da:	c9 01       	movw	r24, r18
    20dc:	8c 87       	std	Y+12, r24	; 0x0c
    20de:	9d 87       	std	Y+13, r25	; 0x0d
    20e0:	ae 87       	std	Y+14, r26	; 0x0e
    20e2:	bf 87       	std	Y+15, r27	; 0x0f
	if(((u16Num_copy % 100000000) == 0))
	{ zeros =8 ;}
	if(((u16Num_copy % 1000000000) == 0))
	{ zeros =9 ;}
*/
	for(i=size ; i > 0; i--)
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	81 50       	subi	r24, 0x01	; 1
    20e8:	8b 83       	std	Y+3, r24	; 0x03
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	18 16       	cp	r1, r24
    20ee:	0c f4       	brge	.+2      	; 0x20f2 <LCD_WriteNum+0x152>
    20f0:	b4 cf       	rjmp	.-152    	; 0x205a <LCD_WriteNum+0xba>
    20f2:	25 c0       	rjmp	.+74     	; 0x213e <LCD_WriteNum+0x19e>

	}

	while(reverse_num != 0)
	{
		i = (reverse_num % 10)  ;
    20f4:	8c 81       	ldd	r24, Y+4	; 0x04
    20f6:	9d 81       	ldd	r25, Y+5	; 0x05
    20f8:	ae 81       	ldd	r26, Y+6	; 0x06
    20fa:	bf 81       	ldd	r27, Y+7	; 0x07
    20fc:	2a e0       	ldi	r18, 0x0A	; 10
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	50 e0       	ldi	r21, 0x00	; 0
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divmodsi4>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	8b 83       	std	Y+3, r24	; 0x03
		LCD_WriteData(i+ 48);
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	80 5d       	subi	r24, 0xD0	; 208
    2116:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_WriteData>
		reverse_num /= 10 ;
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	9d 81       	ldd	r25, Y+5	; 0x05
    211e:	ae 81       	ldd	r26, Y+6	; 0x06
    2120:	bf 81       	ldd	r27, Y+7	; 0x07
    2122:	2a e0       	ldi	r18, 0x0A	; 10
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	bc 01       	movw	r22, r24
    212c:	cd 01       	movw	r24, r26
    212e:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divmodsi4>
    2132:	da 01       	movw	r26, r20
    2134:	c9 01       	movw	r24, r18
    2136:	8c 83       	std	Y+4, r24	; 0x04
    2138:	9d 83       	std	Y+5, r25	; 0x05
    213a:	ae 83       	std	Y+6, r26	; 0x06
    213c:	bf 83       	std	Y+7, r27	; 0x07
		reverse_num += ((u16Num_copy % 10) * (power(10,i-1)));
		u16Num_copy /= 10 ;

	}

	while(reverse_num != 0)
    213e:	8c 81       	ldd	r24, Y+4	; 0x04
    2140:	9d 81       	ldd	r25, Y+5	; 0x05
    2142:	ae 81       	ldd	r26, Y+6	; 0x06
    2144:	bf 81       	ldd	r27, Y+7	; 0x07
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	a1 05       	cpc	r26, r1
    214a:	b1 05       	cpc	r27, r1
    214c:	99 f6       	brne	.-90     	; 0x20f4 <LCD_WriteNum+0x154>
		i = (reverse_num % 10)  ;
		LCD_WriteData(i+ 48);
		reverse_num /= 10 ;
	}

	for(i=0;i<zeros;i++)
    214e:	1b 82       	std	Y+3, r1	; 0x03
    2150:	06 c0       	rjmp	.+12     	; 0x215e <LCD_WriteNum+0x1be>
	{
		LCD_WriteData(48);
    2152:	80 e3       	ldi	r24, 0x30	; 48
    2154:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_WriteData>
		i = (reverse_num % 10)  ;
		LCD_WriteData(i+ 48);
		reverse_num /= 10 ;
	}

	for(i=0;i<zeros;i++)
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	8b 83       	std	Y+3, r24	; 0x03
    215e:	9b 81       	ldd	r25, Y+3	; 0x03
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	98 17       	cp	r25, r24
    2164:	b4 f3       	brlt	.-20     	; 0x2152 <LCD_WriteNum+0x1b2>
	{
		LCD_WriteData(48);
	}

}
    2166:	2f 96       	adiw	r28, 0x0f	; 15
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	ff 90       	pop	r15
    217c:	ef 90       	pop	r14
    217e:	08 95       	ret

00002180 <LCD_CLEAR_DISPLAY>:

/***********************************************************************/
/***********************************************************************/

void LCD_CLEAR_DISPLAY(void)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCMD(0x01);
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
}
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <LCD_RETURN_HOME>:

void LCD_RETURN_HOME(void)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCMD(0x02);
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
}
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <LCD_DISPLAY_SHIFT_RIGHT>:

void LCD_DISPLAY_SHIFT_RIGHT(void)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCMD(0x1c);
    21b0:	8c e1       	ldi	r24, 0x1C	; 28
    21b2:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
}
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	08 95       	ret

000021bc <LCD_DISPLAY_SHIFT_LEFT>:

void LCD_DISPLAY_SHIFT_LEFT(void)
{
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCMD(0x18);
    21c4:	88 e1       	ldi	r24, 0x18	; 24
    21c6:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCMD>
}
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <__vector_11>:
void (* PF_TIMER) (void);

void __vector_11 (void) __attribute__ ((signal , used));

void __vector_11 (void)
{
    21d0:	1f 92       	push	r1
    21d2:	0f 92       	push	r0
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	0f 92       	push	r0
    21d8:	11 24       	eor	r1, r1
    21da:	2f 93       	push	r18
    21dc:	3f 93       	push	r19
    21de:	4f 93       	push	r20
    21e0:	5f 93       	push	r21
    21e2:	6f 93       	push	r22
    21e4:	7f 93       	push	r23
    21e6:	8f 93       	push	r24
    21e8:	9f 93       	push	r25
    21ea:	af 93       	push	r26
    21ec:	bf 93       	push	r27
    21ee:	ef 93       	push	r30
    21f0:	ff 93       	push	r31
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
	PF_TIMER();
    21fa:	e0 91 7f 01 	lds	r30, 0x017F
    21fe:	f0 91 80 01 	lds	r31, 0x0180
    2202:	09 95       	icall
}
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	ff 91       	pop	r31
    220a:	ef 91       	pop	r30
    220c:	bf 91       	pop	r27
    220e:	af 91       	pop	r26
    2210:	9f 91       	pop	r25
    2212:	8f 91       	pop	r24
    2214:	7f 91       	pop	r23
    2216:	6f 91       	pop	r22
    2218:	5f 91       	pop	r21
    221a:	4f 91       	pop	r20
    221c:	3f 91       	pop	r19
    221e:	2f 91       	pop	r18
    2220:	0f 90       	pop	r0
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	0f 90       	pop	r0
    2226:	1f 90       	pop	r1
    2228:	18 95       	reti

0000222a <CALLback_TIMER>:

/**********************************************************************/

void CALLback_TIMER (void (* ptr) (void))
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	00 d0       	rcall	.+0      	; 0x2230 <CALLback_TIMER+0x6>
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	89 83       	std	Y+1, r24	; 0x01
	PF_TIMER = (void (*) (void))ptr ;
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	9a 81       	ldd	r25, Y+2	; 0x02
    223c:	90 93 80 01 	sts	0x0180, r25
    2240:	80 93 7f 01 	sts	0x017F, r24
}
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <TIMER0V_INT_Disable>:

/**********************************************************************/

void TIMER0V_INT_Disable (void )
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
	CLR(TIMSK_REG , TOIE0);
    2256:	a9 e5       	ldi	r26, 0x59	; 89
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e9 e5       	ldi	r30, 0x59	; 89
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	8e 7f       	andi	r24, 0xFE	; 254
    2262:	8c 93       	st	X, r24
}
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <TIMER0C_INT_Disable>:

/**********************************************************************/

void TIMER0C_INT_Disable (void )
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
	CLR(TIMSK_REG , OCIE0);
    2272:	a9 e5       	ldi	r26, 0x59	; 89
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e9 e5       	ldi	r30, 0x59	; 89
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	8d 7f       	andi	r24, 0xFD	; 253
    227e:	8c 93       	st	X, r24
}
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <TOV0_Flag_Clear>:

/**********************************************************************/

void TOV0_Flag_Clear(void)
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
	SET(TIFR_REG , TOV0);
    228e:	a8 e5       	ldi	r26, 0x58	; 88
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e8 e5       	ldi	r30, 0x58	; 88
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	81 60       	ori	r24, 0x01	; 1
    229a:	8c 93       	st	X, r24

}
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <OCF0_Flag_Clear>:

/**********************************************************************/

void OCF0_Flag_Clear(void)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
	SET(TIFR_REG , OCF0);
    22aa:	a8 e5       	ldi	r26, 0x58	; 88
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e8 e5       	ldi	r30, 0x58	; 88
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	82 60       	ori	r24, 0x02	; 2
    22b6:	8c 93       	st	X, r24

}
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <TOV0_Flag_Read>:

/**********************************************************************/

u8 TOV0_Flag_Read(void)
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	0f 92       	push	r0
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
	u8 read ;
	read = GET(TIFR_REG , TOV0);
    22c8:	e8 e5       	ldi	r30, 0x58	; 88
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	81 70       	andi	r24, 0x01	; 1
    22d0:	89 83       	std	Y+1, r24	; 0x01
	return read;
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22d4:	0f 90       	pop	r0
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <OCF0_Flag_Read>:

/**********************************************************************/

u8 OCF0_Flag_Read(void)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	0f 92       	push	r0
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
	u8 read ;
	read = GET(TIFR_REG , OCF0);
    22e6:	e8 e5       	ldi	r30, 0x58	; 88
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	86 95       	lsr	r24
    22ee:	81 70       	andi	r24, 0x01	; 1
    22f0:	89 83       	std	Y+1, r24	; 0x01
	return read;
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <TIMER_INIT>:

/**********************************************************************/
void TIMER_INIT(u8 TIMER_MODE , u8 CLOCK_SOURCE , u8 INTERRUPT_POLLING ,u8 TCNT_PRELOAD ,u8 OCR_PRELOAD , u8 OCO_INVERTING_NONINVERTING)
{
    22fc:	ef 92       	push	r14
    22fe:	0f 93       	push	r16
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	00 d0       	rcall	.+0      	; 0x2306 <TIMER_INIT+0xa>
    2306:	00 d0       	rcall	.+0      	; 0x2308 <TIMER_INIT+0xc>
    2308:	00 d0       	rcall	.+0      	; 0x230a <TIMER_INIT+0xe>
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	6a 83       	std	Y+2, r22	; 0x02
    2312:	4b 83       	std	Y+3, r20	; 0x03
    2314:	2c 83       	std	Y+4, r18	; 0x04
    2316:	0d 83       	std	Y+5, r16	; 0x05
    2318:	ee 82       	std	Y+6, r14	; 0x06
	CLR(TCCR0_REG , FOC0);
    231a:	a3 e5       	ldi	r26, 0x53	; 83
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e3 e5       	ldi	r30, 0x53	; 83
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	8f 77       	andi	r24, 0x7F	; 127
    2326:	8c 93       	st	X, r24

	if(OCO_INVERTING_NONINVERTING == OCO_DISABLE)
    2328:	8e 81       	ldd	r24, Y+6	; 0x06
    232a:	88 23       	and	r24, r24
    232c:	79 f4       	brne	.+30     	; 0x234c <TIMER_INIT+0x50>
	{
		CLR(TCCR0_REG , COM00);
    232e:	a3 e5       	ldi	r26, 0x53	; 83
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e3 e5       	ldi	r30, 0x53	; 83
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	8f 7e       	andi	r24, 0xEF	; 239
    233a:	8c 93       	st	X, r24
		CLR(TCCR0_REG , COM01);
    233c:	a3 e5       	ldi	r26, 0x53	; 83
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e3 e5       	ldi	r30, 0x53	; 83
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	8f 7d       	andi	r24, 0xDF	; 223
    2348:	8c 93       	st	X, r24
    234a:	23 c0       	rjmp	.+70     	; 0x2392 <TIMER_INIT+0x96>
	}
	else if(OCO_INVERTING_NONINVERTING == NONINVERTING)
    234c:	8e 81       	ldd	r24, Y+6	; 0x06
    234e:	82 30       	cpi	r24, 0x02	; 2
    2350:	79 f4       	brne	.+30     	; 0x2370 <TIMER_INIT+0x74>
	{
		CLR(TCCR0_REG , COM00);
    2352:	a3 e5       	ldi	r26, 0x53	; 83
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e3 e5       	ldi	r30, 0x53	; 83
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	8f 7e       	andi	r24, 0xEF	; 239
    235e:	8c 93       	st	X, r24
		SET(TCCR0_REG , COM01);
    2360:	a3 e5       	ldi	r26, 0x53	; 83
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e3 e5       	ldi	r30, 0x53	; 83
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	80 62       	ori	r24, 0x20	; 32
    236c:	8c 93       	st	X, r24
    236e:	11 c0       	rjmp	.+34     	; 0x2392 <TIMER_INIT+0x96>

	}else if(OCO_INVERTING_NONINVERTING == INVERTING)
    2370:	8e 81       	ldd	r24, Y+6	; 0x06
    2372:	83 30       	cpi	r24, 0x03	; 3
    2374:	71 f4       	brne	.+28     	; 0x2392 <TIMER_INIT+0x96>
	{
		SET(TCCR0_REG , COM00);
    2376:	a3 e5       	ldi	r26, 0x53	; 83
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e3 e5       	ldi	r30, 0x53	; 83
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	80 61       	ori	r24, 0x10	; 16
    2382:	8c 93       	st	X, r24
		SET(TCCR0_REG , COM01);
    2384:	a3 e5       	ldi	r26, 0x53	; 83
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e3 e5       	ldi	r30, 0x53	; 83
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	80 62       	ori	r24, 0x20	; 32
    2390:	8c 93       	st	X, r24
	}


	if(TIMER_MODE == NORMAL)
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	88 23       	and	r24, r24
    2396:	09 f5       	brne	.+66     	; 0x23da <TIMER_INIT+0xde>
	{
		CLR(TCCR0_REG , WGM01);
    2398:	a3 e5       	ldi	r26, 0x53	; 83
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e3 e5       	ldi	r30, 0x53	; 83
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	87 7f       	andi	r24, 0xF7	; 247
    23a4:	8c 93       	st	X, r24
		CLR(TCCR0_REG , WGM00);
    23a6:	a3 e5       	ldi	r26, 0x53	; 83
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e3 e5       	ldi	r30, 0x53	; 83
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	8f 7b       	andi	r24, 0xBF	; 191
    23b2:	8c 93       	st	X, r24
		if(OCO_INVERTING_NONINVERTING == OCO_TOGGLE)
    23b4:	8e 81       	ldd	r24, Y+6	; 0x06
    23b6:	81 30       	cpi	r24, 0x01	; 1
    23b8:	09 f0       	breq	.+2      	; 0x23bc <TIMER_INIT+0xc0>
    23ba:	55 c0       	rjmp	.+170    	; 0x2466 <TIMER_INIT+0x16a>
		{
			SET(TCCR0_REG , COM00);
    23bc:	a3 e5       	ldi	r26, 0x53	; 83
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e3 e5       	ldi	r30, 0x53	; 83
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	80 61       	ori	r24, 0x10	; 16
    23c8:	8c 93       	st	X, r24
			CLR(TCCR0_REG , COM01);
    23ca:	a3 e5       	ldi	r26, 0x53	; 83
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e3 e5       	ldi	r30, 0x53	; 83
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	8f 7d       	andi	r24, 0xDF	; 223
    23d6:	8c 93       	st	X, r24
    23d8:	46 c0       	rjmp	.+140    	; 0x2466 <TIMER_INIT+0x16a>
		}
	}
	else if(TIMER_MODE == PWM)
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	79 f4       	brne	.+30     	; 0x23fe <TIMER_INIT+0x102>
	{
		CLR(TCCR0_REG , WGM01);
    23e0:	a3 e5       	ldi	r26, 0x53	; 83
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e3 e5       	ldi	r30, 0x53	; 83
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	87 7f       	andi	r24, 0xF7	; 247
    23ec:	8c 93       	st	X, r24
		SET(TCCR0_REG , WGM00);
    23ee:	a3 e5       	ldi	r26, 0x53	; 83
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e3 e5       	ldi	r30, 0x53	; 83
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	80 64       	ori	r24, 0x40	; 64
    23fa:	8c 93       	st	X, r24
    23fc:	34 c0       	rjmp	.+104    	; 0x2466 <TIMER_INIT+0x16a>
		//DIO_voidSetpinDirection(PORTB,PIN0,OUT);
	}
	else if(TIMER_MODE == CTC)
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	82 30       	cpi	r24, 0x02	; 2
    2402:	01 f5       	brne	.+64     	; 0x2444 <TIMER_INIT+0x148>
	{
		SET(TCCR0_REG , WGM01);
    2404:	a3 e5       	ldi	r26, 0x53	; 83
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e3 e5       	ldi	r30, 0x53	; 83
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	88 60       	ori	r24, 0x08	; 8
    2410:	8c 93       	st	X, r24
		CLR(TCCR0_REG , WGM00);
    2412:	a3 e5       	ldi	r26, 0x53	; 83
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e3 e5       	ldi	r30, 0x53	; 83
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8f 7b       	andi	r24, 0xBF	; 191
    241e:	8c 93       	st	X, r24
		if(OCO_INVERTING_NONINVERTING == OCO_TOGGLE)
    2420:	8e 81       	ldd	r24, Y+6	; 0x06
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	01 f5       	brne	.+64     	; 0x2466 <TIMER_INIT+0x16a>
		{
			SET(TCCR0_REG , COM00);
    2426:	a3 e5       	ldi	r26, 0x53	; 83
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e3 e5       	ldi	r30, 0x53	; 83
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	80 61       	ori	r24, 0x10	; 16
    2432:	8c 93       	st	X, r24
			CLR(TCCR0_REG , COM01);
    2434:	a3 e5       	ldi	r26, 0x53	; 83
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e3 e5       	ldi	r30, 0x53	; 83
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	8f 7d       	andi	r24, 0xDF	; 223
    2440:	8c 93       	st	X, r24
    2442:	11 c0       	rjmp	.+34     	; 0x2466 <TIMER_INIT+0x16a>
		}
	}
	else if(TIMER_MODE == FAST_PWM)
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	83 30       	cpi	r24, 0x03	; 3
    2448:	71 f4       	brne	.+28     	; 0x2466 <TIMER_INIT+0x16a>
	{
		SET(TCCR0_REG , WGM01);
    244a:	a3 e5       	ldi	r26, 0x53	; 83
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e3 e5       	ldi	r30, 0x53	; 83
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	88 60       	ori	r24, 0x08	; 8
    2456:	8c 93       	st	X, r24
		SET(TCCR0_REG , WGM00);
    2458:	a3 e5       	ldi	r26, 0x53	; 83
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e3 e5       	ldi	r30, 0x53	; 83
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	80 64       	ori	r24, 0x40	; 64
    2464:	8c 93       	st	X, r24
		//DIO_voidSetpinDirection(PORTB,PIN0,OUT);
	}


	if(CLOCK_SOURCE == OFF)
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	88 23       	and	r24, r24
    246a:	b1 f4       	brne	.+44     	; 0x2498 <TIMER_INIT+0x19c>
	{
		CLR(TCCR0_REG , CS00);
    246c:	a3 e5       	ldi	r26, 0x53	; 83
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e3 e5       	ldi	r30, 0x53	; 83
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	8e 7f       	andi	r24, 0xFE	; 254
    2478:	8c 93       	st	X, r24
		CLR(TCCR0_REG , CS01);
    247a:	a3 e5       	ldi	r26, 0x53	; 83
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e5       	ldi	r30, 0x53	; 83
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	8d 7f       	andi	r24, 0xFD	; 253
    2486:	8c 93       	st	X, r24
		CLR(TCCR0_REG , CS02);
    2488:	a3 e5       	ldi	r26, 0x53	; 83
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e3 e5       	ldi	r30, 0x53	; 83
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	8b 7f       	andi	r24, 0xFB	; 251
    2494:	8c 93       	st	X, r24
    2496:	c2 c0       	rjmp	.+388    	; 0x261c <TIMER_INIT+0x320>
	}
	else if(CLOCK_SOURCE == FCPU)
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	81 30       	cpi	r24, 0x01	; 1
    249c:	b1 f4       	brne	.+44     	; 0x24ca <TIMER_INIT+0x1ce>
	{
		SET(TCCR0_REG , CS00);
    249e:	a3 e5       	ldi	r26, 0x53	; 83
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e3 e5       	ldi	r30, 0x53	; 83
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	81 60       	ori	r24, 0x01	; 1
    24aa:	8c 93       	st	X, r24
		CLR(TCCR0_REG , CS01);
    24ac:	a3 e5       	ldi	r26, 0x53	; 83
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e3 e5       	ldi	r30, 0x53	; 83
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	8d 7f       	andi	r24, 0xFD	; 253
    24b8:	8c 93       	st	X, r24
		CLR(TCCR0_REG , CS02);
    24ba:	a3 e5       	ldi	r26, 0x53	; 83
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e3 e5       	ldi	r30, 0x53	; 83
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	8b 7f       	andi	r24, 0xFB	; 251
    24c6:	8c 93       	st	X, r24
    24c8:	a9 c0       	rjmp	.+338    	; 0x261c <TIMER_INIT+0x320>
	}
	else if(CLOCK_SOURCE == FCPU8)
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	82 30       	cpi	r24, 0x02	; 2
    24ce:	b1 f4       	brne	.+44     	; 0x24fc <TIMER_INIT+0x200>
	{
		CLR(TCCR0_REG , CS00);
    24d0:	a3 e5       	ldi	r26, 0x53	; 83
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e3 e5       	ldi	r30, 0x53	; 83
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	8e 7f       	andi	r24, 0xFE	; 254
    24dc:	8c 93       	st	X, r24
		SET(TCCR0_REG , CS01);
    24de:	a3 e5       	ldi	r26, 0x53	; 83
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e3 e5       	ldi	r30, 0x53	; 83
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	82 60       	ori	r24, 0x02	; 2
    24ea:	8c 93       	st	X, r24
		CLR(TCCR0_REG , CS02);
    24ec:	a3 e5       	ldi	r26, 0x53	; 83
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e3 e5       	ldi	r30, 0x53	; 83
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	8b 7f       	andi	r24, 0xFB	; 251
    24f8:	8c 93       	st	X, r24
    24fa:	90 c0       	rjmp	.+288    	; 0x261c <TIMER_INIT+0x320>
	}
	else if(CLOCK_SOURCE == FCPU64)
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	83 30       	cpi	r24, 0x03	; 3
    2500:	b1 f4       	brne	.+44     	; 0x252e <TIMER_INIT+0x232>
	{
		SET(TCCR0_REG , CS00);
    2502:	a3 e5       	ldi	r26, 0x53	; 83
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e3 e5       	ldi	r30, 0x53	; 83
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	81 60       	ori	r24, 0x01	; 1
    250e:	8c 93       	st	X, r24
		SET(TCCR0_REG , CS01);
    2510:	a3 e5       	ldi	r26, 0x53	; 83
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e3 e5       	ldi	r30, 0x53	; 83
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	82 60       	ori	r24, 0x02	; 2
    251c:	8c 93       	st	X, r24
		CLR(TCCR0_REG , CS02);
    251e:	a3 e5       	ldi	r26, 0x53	; 83
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e3 e5       	ldi	r30, 0x53	; 83
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	8b 7f       	andi	r24, 0xFB	; 251
    252a:	8c 93       	st	X, r24
    252c:	77 c0       	rjmp	.+238    	; 0x261c <TIMER_INIT+0x320>
	}
	else if(CLOCK_SOURCE == FCPU256)
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	84 30       	cpi	r24, 0x04	; 4
    2532:	b1 f4       	brne	.+44     	; 0x2560 <TIMER_INIT+0x264>
	{
		CLR(TCCR0_REG , CS00);
    2534:	a3 e5       	ldi	r26, 0x53	; 83
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e3 e5       	ldi	r30, 0x53	; 83
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	8e 7f       	andi	r24, 0xFE	; 254
    2540:	8c 93       	st	X, r24
		CLR(TCCR0_REG , CS01);
    2542:	a3 e5       	ldi	r26, 0x53	; 83
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e3 e5       	ldi	r30, 0x53	; 83
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	8d 7f       	andi	r24, 0xFD	; 253
    254e:	8c 93       	st	X, r24
		SET(TCCR0_REG , CS02);
    2550:	a3 e5       	ldi	r26, 0x53	; 83
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e3 e5       	ldi	r30, 0x53	; 83
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	84 60       	ori	r24, 0x04	; 4
    255c:	8c 93       	st	X, r24
    255e:	5e c0       	rjmp	.+188    	; 0x261c <TIMER_INIT+0x320>
	}
	else if(CLOCK_SOURCE == FCPU1024)
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	85 30       	cpi	r24, 0x05	; 5
    2564:	b1 f4       	brne	.+44     	; 0x2592 <TIMER_INIT+0x296>
	{
		SET(TCCR0_REG , CS00);
    2566:	a3 e5       	ldi	r26, 0x53	; 83
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e3 e5       	ldi	r30, 0x53	; 83
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	81 60       	ori	r24, 0x01	; 1
    2572:	8c 93       	st	X, r24
		CLR(TCCR0_REG , CS01);
    2574:	a3 e5       	ldi	r26, 0x53	; 83
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	e3 e5       	ldi	r30, 0x53	; 83
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	8d 7f       	andi	r24, 0xFD	; 253
    2580:	8c 93       	st	X, r24
		SET(TCCR0_REG , CS02);
    2582:	a3 e5       	ldi	r26, 0x53	; 83
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e3 e5       	ldi	r30, 0x53	; 83
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	84 60       	ori	r24, 0x04	; 4
    258e:	8c 93       	st	X, r24
    2590:	45 c0       	rjmp	.+138    	; 0x261c <TIMER_INIT+0x320>
	}
	else if(CLOCK_SOURCE == FALLING_EDGE_COUNTER)
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	86 30       	cpi	r24, 0x06	; 6
    2596:	01 f5       	brne	.+64     	; 0x25d8 <TIMER_INIT+0x2dc>
	{
		CLR(TCCR0_REG , CS00);
    2598:	a3 e5       	ldi	r26, 0x53	; 83
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e3 e5       	ldi	r30, 0x53	; 83
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	8e 7f       	andi	r24, 0xFE	; 254
    25a4:	8c 93       	st	X, r24
		SET(TCCR0_REG , CS01);
    25a6:	a3 e5       	ldi	r26, 0x53	; 83
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	e3 e5       	ldi	r30, 0x53	; 83
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	82 60       	ori	r24, 0x02	; 2
    25b2:	8c 93       	st	X, r24
		SET(TCCR0_REG , CS02);
    25b4:	a3 e5       	ldi	r26, 0x53	; 83
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e3 e5       	ldi	r30, 0x53	; 83
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	84 60       	ori	r24, 0x04	; 4
    25c0:	8c 93       	st	X, r24
		DIO_voidSetpinDirection(PORTB,PIN0,IN);
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	60 e0       	ldi	r22, 0x00	; 0
    25c6:	40 e0       	ldi	r20, 0x00	; 0
    25c8:	0e 94 1f 08 	call	0x103e	; 0x103e <DIO_voidSetpinDirection>
		DIO_voidSetpinValue(PORTB,PIN0,HIGH);
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetpinValue>
    25d6:	22 c0       	rjmp	.+68     	; 0x261c <TIMER_INIT+0x320>
	}
	else if(CLOCK_SOURCE == RISING_EDGE_COUNTER)
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	87 30       	cpi	r24, 0x07	; 7
    25dc:	f9 f4       	brne	.+62     	; 0x261c <TIMER_INIT+0x320>
	{
		SET(TCCR0_REG , CS00);
    25de:	a3 e5       	ldi	r26, 0x53	; 83
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e3 e5       	ldi	r30, 0x53	; 83
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	81 60       	ori	r24, 0x01	; 1
    25ea:	8c 93       	st	X, r24
		SET(TCCR0_REG , CS01);
    25ec:	a3 e5       	ldi	r26, 0x53	; 83
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e3 e5       	ldi	r30, 0x53	; 83
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	82 60       	ori	r24, 0x02	; 2
    25f8:	8c 93       	st	X, r24
		SET(TCCR0_REG , CS02);
    25fa:	a3 e5       	ldi	r26, 0x53	; 83
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e3 e5       	ldi	r30, 0x53	; 83
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	84 60       	ori	r24, 0x04	; 4
    2606:	8c 93       	st	X, r24
		DIO_voidSetpinDirection(PORTB,PIN0,IN);
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 1f 08 	call	0x103e	; 0x103e <DIO_voidSetpinDirection>
		DIO_voidSetpinValue(PORTB,PIN0,LOW);
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetpinValue>

	}


	if(INTERRUPT_POLLING == INTERRUPT)
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	88 23       	and	r24, r24
    2620:	b1 f4       	brne	.+44     	; 0x264e <TIMER_INIT+0x352>
	{
		SET(TIMSK_REG , TOIE0);
    2622:	a9 e5       	ldi	r26, 0x59	; 89
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e9 e5       	ldi	r30, 0x59	; 89
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	81 60       	ori	r24, 0x01	; 1
    262e:	8c 93       	st	X, r24
		SET(TIMSK_REG , OCIE0);
    2630:	a9 e5       	ldi	r26, 0x59	; 89
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e9 e5       	ldi	r30, 0x59	; 89
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	82 60       	ori	r24, 0x02	; 2
    263c:	8c 93       	st	X, r24
		SET(SREG_REG,GIE_PIN);
    263e:	af e5       	ldi	r26, 0x5F	; 95
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	ef e5       	ldi	r30, 0x5F	; 95
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	80 68       	ori	r24, 0x80	; 128
    264a:	8c 93       	st	X, r24
    264c:	11 c0       	rjmp	.+34     	; 0x2670 <TIMER_INIT+0x374>
	}
	else if(INTERRUPT_POLLING == POLLING)
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	71 f4       	brne	.+28     	; 0x2670 <TIMER_INIT+0x374>
	{
		CLR(TIMSK_REG , TOIE0);
    2654:	a9 e5       	ldi	r26, 0x59	; 89
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	e9 e5       	ldi	r30, 0x59	; 89
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	8e 7f       	andi	r24, 0xFE	; 254
    2660:	8c 93       	st	X, r24
		CLR(TIMSK_REG , OCIE0);
    2662:	a9 e5       	ldi	r26, 0x59	; 89
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	e9 e5       	ldi	r30, 0x59	; 89
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	8d 7f       	andi	r24, 0xFD	; 253
    266e:	8c 93       	st	X, r24
	}


	TCNT0_REG =  TCNT_PRELOAD;
    2670:	e2 e5       	ldi	r30, 0x52	; 82
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	8c 81       	ldd	r24, Y+4	; 0x04
    2676:	80 83       	st	Z, r24
	OCR0_REG =   OCR_PRELOAD ;
    2678:	ec e5       	ldi	r30, 0x5C	; 92
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	8d 81       	ldd	r24, Y+5	; 0x05
    267e:	80 83       	st	Z, r24
}
    2680:	26 96       	adiw	r28, 0x06	; 6
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	0f 91       	pop	r16
    2692:	ef 90       	pop	r14
    2694:	08 95       	ret

00002696 <TCNT0_REG_LOAD>:
/**********************************************************************/

void TCNT0_REG_LOAD(u8 TCNT0_VALUE)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	0f 92       	push	r0
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG =  TCNT0_VALUE;
    26a2:	e2 e5       	ldi	r30, 0x52	; 82
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	80 83       	st	Z, r24
}
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <OCR0_REG_LOAD>:
/**********************************************************************/

void OCR0_REG_LOAD(u8 OCR0_VALUE)
{
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	0f 92       	push	r0
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG =  OCR0_VALUE;
    26be:	ec e5       	ldi	r30, 0x5C	; 92
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	80 83       	st	Z, r24
}
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <TIMER0_DELAY_ms>:
/**********************************************************************/
void TIMER0_DELAY_ms(u32 TIME_ms)
{
    26ce:	ef 92       	push	r14
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	28 97       	sbiw	r28, 0x08	; 8
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	6d 83       	std	Y+5, r22	; 0x05
    26ea:	7e 83       	std	Y+6, r23	; 0x06
    26ec:	8f 83       	std	Y+7, r24	; 0x07
    26ee:	98 87       	std	Y+8, r25	; 0x08
	TIMER_INIT(NORMAL ,  FCPU8 , POLLING , 0 , 0 , OCO_DISABLE );
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	62 e0       	ldi	r22, 0x02	; 2
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	00 e0       	ldi	r16, 0x00	; 0
    26fa:	ee 24       	eor	r14, r14
    26fc:	0e 94 7e 11 	call	0x22fc	; 0x22fc <TIMER_INIT>
	u32 count=0;
    2700:	19 82       	std	Y+1, r1	; 0x01
    2702:	1a 82       	std	Y+2, r1	; 0x02
    2704:	1b 82       	std	Y+3, r1	; 0x03
    2706:	1c 82       	std	Y+4, r1	; 0x04
	while(1)
	{
		if((TOV0_Flag_Read()) == 1)
    2708:	0e 94 5f 11 	call	0x22be	; 0x22be <TOV0_Flag_Read>
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	69 f4       	brne	.+26     	; 0x272a <TIMER0_DELAY_ms+0x5c>
		{
			TOV0_Flag_Clear();
    2710:	0e 94 43 11 	call	0x2286	; 0x2286 <TOV0_Flag_Clear>
			count++;
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	9a 81       	ldd	r25, Y+2	; 0x02
    2718:	ab 81       	ldd	r26, Y+3	; 0x03
    271a:	bc 81       	ldd	r27, Y+4	; 0x04
    271c:	01 96       	adiw	r24, 0x01	; 1
    271e:	a1 1d       	adc	r26, r1
    2720:	b1 1d       	adc	r27, r1
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	ab 83       	std	Y+3, r26	; 0x03
    2728:	bc 83       	std	Y+4, r27	; 0x04
		}
		if(count == (u32 *)((TIME_ms * 1000)/256))
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	8c 01       	movw	r16, r24
    2730:	8d 81       	ldd	r24, Y+5	; 0x05
    2732:	9e 81       	ldd	r25, Y+6	; 0x06
    2734:	af 81       	ldd	r26, Y+7	; 0x07
    2736:	b8 85       	ldd	r27, Y+8	; 0x08
    2738:	28 ee       	ldi	r18, 0xE8	; 232
    273a:	33 e0       	ldi	r19, 0x03	; 3
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	50 e0       	ldi	r21, 0x00	; 0
    2740:	bc 01       	movw	r22, r24
    2742:	cd 01       	movw	r24, r26
    2744:	0e 94 a8 1a 	call	0x3550	; 0x3550 <__mulsi3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	89 2f       	mov	r24, r25
    274e:	9a 2f       	mov	r25, r26
    2750:	ab 2f       	mov	r26, r27
    2752:	bb 27       	eor	r27, r27
    2754:	08 17       	cp	r16, r24
    2756:	19 07       	cpc	r17, r25
    2758:	b9 f6       	brne	.-82     	; 0x2708 <TIMER0_DELAY_ms+0x3a>
		{break;}
	}
}
    275a:	28 96       	adiw	r28, 0x08	; 8
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	1f 91       	pop	r17
    276c:	0f 91       	pop	r16
    276e:	ef 90       	pop	r14
    2770:	08 95       	ret

00002772 <__vector_6>:
void (* PF_TIMER1IC) (void);

void __vector_6 (void) __attribute__ ((signal , used));

void __vector_6 (void)
{
    2772:	1f 92       	push	r1
    2774:	0f 92       	push	r0
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	0f 92       	push	r0
    277a:	11 24       	eor	r1, r1
    277c:	2f 93       	push	r18
    277e:	3f 93       	push	r19
    2780:	4f 93       	push	r20
    2782:	5f 93       	push	r21
    2784:	6f 93       	push	r22
    2786:	7f 93       	push	r23
    2788:	8f 93       	push	r24
    278a:	9f 93       	push	r25
    278c:	af 93       	push	r26
    278e:	bf 93       	push	r27
    2790:	ef 93       	push	r30
    2792:	ff 93       	push	r31
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
	PF_TIMER1IC();
    279c:	e0 91 87 01 	lds	r30, 0x0187
    27a0:	f0 91 88 01 	lds	r31, 0x0188
    27a4:	09 95       	icall
}
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	ff 91       	pop	r31
    27ac:	ef 91       	pop	r30
    27ae:	bf 91       	pop	r27
    27b0:	af 91       	pop	r26
    27b2:	9f 91       	pop	r25
    27b4:	8f 91       	pop	r24
    27b6:	7f 91       	pop	r23
    27b8:	6f 91       	pop	r22
    27ba:	5f 91       	pop	r21
    27bc:	4f 91       	pop	r20
    27be:	3f 91       	pop	r19
    27c0:	2f 91       	pop	r18
    27c2:	0f 90       	pop	r0
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	0f 90       	pop	r0
    27c8:	1f 90       	pop	r1
    27ca:	18 95       	reti

000027cc <__vector_7>:


void __vector_7 (void) __attribute__ ((signal , used));

void __vector_7 (void)
{
    27cc:	1f 92       	push	r1
    27ce:	0f 92       	push	r0
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	0f 92       	push	r0
    27d4:	11 24       	eor	r1, r1
    27d6:	2f 93       	push	r18
    27d8:	3f 93       	push	r19
    27da:	4f 93       	push	r20
    27dc:	5f 93       	push	r21
    27de:	6f 93       	push	r22
    27e0:	7f 93       	push	r23
    27e2:	8f 93       	push	r24
    27e4:	9f 93       	push	r25
    27e6:	af 93       	push	r26
    27e8:	bf 93       	push	r27
    27ea:	ef 93       	push	r30
    27ec:	ff 93       	push	r31
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
	PF_TIMER1CA();
    27f6:	e0 91 81 01 	lds	r30, 0x0181
    27fa:	f0 91 82 01 	lds	r31, 0x0182
    27fe:	09 95       	icall
}
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	ff 91       	pop	r31
    2806:	ef 91       	pop	r30
    2808:	bf 91       	pop	r27
    280a:	af 91       	pop	r26
    280c:	9f 91       	pop	r25
    280e:	8f 91       	pop	r24
    2810:	7f 91       	pop	r23
    2812:	6f 91       	pop	r22
    2814:	5f 91       	pop	r21
    2816:	4f 91       	pop	r20
    2818:	3f 91       	pop	r19
    281a:	2f 91       	pop	r18
    281c:	0f 90       	pop	r0
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	0f 90       	pop	r0
    2822:	1f 90       	pop	r1
    2824:	18 95       	reti

00002826 <__vector_8>:


void __vector_8 (void) __attribute__ ((signal , used));

void __vector_8 (void)
{
    2826:	1f 92       	push	r1
    2828:	0f 92       	push	r0
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	0f 92       	push	r0
    282e:	11 24       	eor	r1, r1
    2830:	2f 93       	push	r18
    2832:	3f 93       	push	r19
    2834:	4f 93       	push	r20
    2836:	5f 93       	push	r21
    2838:	6f 93       	push	r22
    283a:	7f 93       	push	r23
    283c:	8f 93       	push	r24
    283e:	9f 93       	push	r25
    2840:	af 93       	push	r26
    2842:	bf 93       	push	r27
    2844:	ef 93       	push	r30
    2846:	ff 93       	push	r31
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
	PF_TIMER1CB();
    2850:	e0 91 83 01 	lds	r30, 0x0183
    2854:	f0 91 84 01 	lds	r31, 0x0184
    2858:	09 95       	icall
}
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	ff 91       	pop	r31
    2860:	ef 91       	pop	r30
    2862:	bf 91       	pop	r27
    2864:	af 91       	pop	r26
    2866:	9f 91       	pop	r25
    2868:	8f 91       	pop	r24
    286a:	7f 91       	pop	r23
    286c:	6f 91       	pop	r22
    286e:	5f 91       	pop	r21
    2870:	4f 91       	pop	r20
    2872:	3f 91       	pop	r19
    2874:	2f 91       	pop	r18
    2876:	0f 90       	pop	r0
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	0f 90       	pop	r0
    287c:	1f 90       	pop	r1
    287e:	18 95       	reti

00002880 <__vector_9>:


void __vector_9 (void) __attribute__ ((signal , used));

void __vector_9 (void)
{
    2880:	1f 92       	push	r1
    2882:	0f 92       	push	r0
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	0f 92       	push	r0
    2888:	11 24       	eor	r1, r1
    288a:	2f 93       	push	r18
    288c:	3f 93       	push	r19
    288e:	4f 93       	push	r20
    2890:	5f 93       	push	r21
    2892:	6f 93       	push	r22
    2894:	7f 93       	push	r23
    2896:	8f 93       	push	r24
    2898:	9f 93       	push	r25
    289a:	af 93       	push	r26
    289c:	bf 93       	push	r27
    289e:	ef 93       	push	r30
    28a0:	ff 93       	push	r31
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
	PF_TIMER1V();
    28aa:	e0 91 85 01 	lds	r30, 0x0185
    28ae:	f0 91 86 01 	lds	r31, 0x0186
    28b2:	09 95       	icall
}
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	ff 91       	pop	r31
    28ba:	ef 91       	pop	r30
    28bc:	bf 91       	pop	r27
    28be:	af 91       	pop	r26
    28c0:	9f 91       	pop	r25
    28c2:	8f 91       	pop	r24
    28c4:	7f 91       	pop	r23
    28c6:	6f 91       	pop	r22
    28c8:	5f 91       	pop	r21
    28ca:	4f 91       	pop	r20
    28cc:	3f 91       	pop	r19
    28ce:	2f 91       	pop	r18
    28d0:	0f 90       	pop	r0
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	0f 90       	pop	r0
    28d6:	1f 90       	pop	r1
    28d8:	18 95       	reti

000028da <CALLback_TIMER1IC>:

/**********************************************************************/

void CALLback_TIMER1IC (void (* ptr) (void))
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <CALLback_TIMER1IC+0x6>
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
	PF_TIMER1IC = (void (*) (void))ptr ;
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	9a 81       	ldd	r25, Y+2	; 0x02
    28ec:	90 93 88 01 	sts	0x0188, r25
    28f0:	80 93 87 01 	sts	0x0187, r24
}
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <CALLback_TIMER1CA>:

void CALLback_TIMER1CA (void (* ptr) (void))
{
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	00 d0       	rcall	.+0      	; 0x2904 <CALLback_TIMER1CA+0x6>
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
	PF_TIMER1CA = (void (*) (void))ptr ;
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	9a 81       	ldd	r25, Y+2	; 0x02
    2910:	90 93 82 01 	sts	0x0182, r25
    2914:	80 93 81 01 	sts	0x0181, r24
}
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <CALLback_TIMER1CB>:

void CALLback_TIMER1CB (void (* ptr) (void))
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	00 d0       	rcall	.+0      	; 0x2928 <CALLback_TIMER1CB+0x6>
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
	PF_TIMER1CB = (void (*) (void))ptr ;
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	90 93 84 01 	sts	0x0184, r25
    2938:	80 93 83 01 	sts	0x0183, r24
}
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <CALLback_TIMER1V>:

void CALLback_TIMER1V (void (* ptr) (void))
{
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	00 d0       	rcall	.+0      	; 0x294c <CALLback_TIMER1V+0x6>
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	89 83       	std	Y+1, r24	; 0x01
	PF_TIMER1V = (void (*) (void))ptr ;
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	9a 81       	ldd	r25, Y+2	; 0x02
    2958:	90 93 86 01 	sts	0x0186, r25
    295c:	80 93 85 01 	sts	0x0185, r24
}
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	cf 91       	pop	r28
    2966:	df 91       	pop	r29
    2968:	08 95       	ret

0000296a <OCF1A_Flag_Read>:

/**********************************************************************/

u8 OCF1A_Flag_Read(void)
{
    296a:	df 93       	push	r29
    296c:	cf 93       	push	r28
    296e:	0f 92       	push	r0
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
	u8 read;
	read = GET(TIFR_REG , OCF1A);
    2974:	e8 e5       	ldi	r30, 0x58	; 88
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	82 95       	swap	r24
    297c:	8f 70       	andi	r24, 0x0F	; 15
    297e:	81 70       	andi	r24, 0x01	; 1
    2980:	89 83       	std	Y+1, r24	; 0x01
	return read;
    2982:	89 81       	ldd	r24, Y+1	; 0x01
}
    2984:	0f 90       	pop	r0
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <OCF1B_Flag_Read>:
/**********************************************************************/

u8 OCF1B_Flag_Read(void)
{
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	0f 92       	push	r0
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
	u8 read;
	read = GET(TIFR_REG , OCF1B);
    2996:	e8 e5       	ldi	r30, 0x58	; 88
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	86 95       	lsr	r24
    299e:	86 95       	lsr	r24
    29a0:	86 95       	lsr	r24
    29a2:	81 70       	andi	r24, 0x01	; 1
    29a4:	89 83       	std	Y+1, r24	; 0x01
	return read;
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29a8:	0f 90       	pop	r0
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <TOV1_Flag_Read>:
/**********************************************************************/

u8 TOV1_Flag_Read(void)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	0f 92       	push	r0
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
	u8 read;
	read = GET(TIFR_REG , TOV1);
    29ba:	e8 e5       	ldi	r30, 0x58	; 88
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	86 95       	lsr	r24
    29c2:	86 95       	lsr	r24
    29c4:	81 70       	andi	r24, 0x01	; 1
    29c6:	89 83       	std	Y+1, r24	; 0x01
	return read;
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    29ca:	0f 90       	pop	r0
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <ICF1_Flag_Read>:
/**********************************************************************/

u8 ICF1_Flag_Read(void)
{
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	0f 92       	push	r0
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
	u8 read;
	read = GET(TIFR_REG , ICF1);
    29dc:	e8 e5       	ldi	r30, 0x58	; 88
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	82 95       	swap	r24
    29e4:	86 95       	lsr	r24
    29e6:	87 70       	andi	r24, 0x07	; 7
    29e8:	81 70       	andi	r24, 0x01	; 1
    29ea:	89 83       	std	Y+1, r24	; 0x01
	return read;
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    29ee:	0f 90       	pop	r0
    29f0:	cf 91       	pop	r28
    29f2:	df 91       	pop	r29
    29f4:	08 95       	ret

000029f6 <OCF1A_Flag_Clear>:
/**********************************************************************/

void OCF1A_Flag_Clear(void)
{
    29f6:	df 93       	push	r29
    29f8:	cf 93       	push	r28
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
	SET(TIFR_REG , OCF1A);
    29fe:	a8 e5       	ldi	r26, 0x58	; 88
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e8 e5       	ldi	r30, 0x58	; 88
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	80 61       	ori	r24, 0x10	; 16
    2a0a:	8c 93       	st	X, r24
}
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <OCF1B_Flag_Clear>:
/**********************************************************************/

void OCF1B_Flag_Clear(void)
{
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
	SET(TIFR_REG , OCF1B);
    2a1a:	a8 e5       	ldi	r26, 0x58	; 88
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e8 e5       	ldi	r30, 0x58	; 88
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	88 60       	ori	r24, 0x08	; 8
    2a26:	8c 93       	st	X, r24
}
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	08 95       	ret

00002a2e <TOV1_Flag_Clear>:

/**********************************************************************/

void TOV1_Flag_Clear(void)
{
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
	SET(TIFR_REG , TOV1);
    2a36:	a8 e5       	ldi	r26, 0x58	; 88
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e8 e5       	ldi	r30, 0x58	; 88
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	84 60       	ori	r24, 0x04	; 4
    2a42:	8c 93       	st	X, r24
}
    2a44:	cf 91       	pop	r28
    2a46:	df 91       	pop	r29
    2a48:	08 95       	ret

00002a4a <ICF1_Flag_Clear>:

/**********************************************************************/

void ICF1_Flag_Clear(void)
{
    2a4a:	df 93       	push	r29
    2a4c:	cf 93       	push	r28
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
	SET(TIFR_REG , ICF1);
    2a52:	a8 e5       	ldi	r26, 0x58	; 88
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e8 e5       	ldi	r30, 0x58	; 88
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	80 62       	ori	r24, 0x20	; 32
    2a5e:	8c 93       	st	X, r24
}
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <TIMER1OCA_INT_Disable>:

/**********************************************************************/


void TIMER1OCA_INT_Disable (void )
{
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
	CLR(TIMSK_REG , OCIE1A);
    2a6e:	a9 e5       	ldi	r26, 0x59	; 89
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	e9 e5       	ldi	r30, 0x59	; 89
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	8f 7e       	andi	r24, 0xEF	; 239
    2a7a:	8c 93       	st	X, r24
}
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <TIMER1OCB_INT_Disable>:
/**********************************************************************/

void TIMER1OCB_INT_Disable (void )
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
	CLR(TIMSK_REG , OCIE1B);
    2a8a:	a9 e5       	ldi	r26, 0x59	; 89
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	e9 e5       	ldi	r30, 0x59	; 89
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	87 7f       	andi	r24, 0xF7	; 247
    2a96:	8c 93       	st	X, r24
}
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <TIMER1OV_INT_Disable>:
/**********************************************************************/

void TIMER1OV_INT_Disable (void )
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
	CLR(TIMSK_REG , TOIE1);
    2aa6:	a9 e5       	ldi	r26, 0x59	; 89
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e9 e5       	ldi	r30, 0x59	; 89
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	8b 7f       	andi	r24, 0xFB	; 251
    2ab2:	8c 93       	st	X, r24
}
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	08 95       	ret

00002aba <TIMER1IC_INT_Disable>:
/**********************************************************************/

void TIMER1IC_INT_Disable (void )
{
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
	CLR(TIMSK_REG , TICIE1);
    2ac2:	a9 e5       	ldi	r26, 0x59	; 89
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	e9 e5       	ldi	r30, 0x59	; 89
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	8f 7d       	andi	r24, 0xDF	; 223
    2ace:	8c 93       	st	X, r24
}
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <TCNT1_REG_LOAD>:
/**********************************************************************/


void TCNT1_REG_LOAD(u16 TCNT1_VALUE)
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	00 d0       	rcall	.+0      	; 0x2adc <TCNT1_REG_LOAD+0x6>
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L_REG =  TCNT1_VALUE;
    2ae4:	ec e4       	ldi	r30, 0x4C	; 76
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	80 83       	st	Z, r24
}
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <OCR1A_REG_LOAD>:
/**********************************************************************/

void OCR1A_REG_LOAD(u16 OCR1A_VALUE)
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <OCR1A_REG_LOAD+0x6>
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    2b00:	9a 83       	std	Y+2, r25	; 0x02
    2b02:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL_REG = OCR1A_VALUE;
    2b04:	ea e4       	ldi	r30, 0x4A	; 74
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	80 83       	st	Z, r24
}
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <OCR1B_REG_LOAD>:
/**********************************************************************/

void OCR1B_REG_LOAD(u16 OCR1B_VALUE)
{
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <OCR1B_REG_LOAD+0x6>
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	9a 83       	std	Y+2, r25	; 0x02
    2b22:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL_REG = OCR1B_VALUE;
    2b24:	e8 e4       	ldi	r30, 0x48	; 72
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	80 83       	st	Z, r24
}
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <ICR1_REG_LOAD>:
/**********************************************************************/

void ICR1_REG_LOAD(u16 ICR1_VALUE)
{
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	00 d0       	rcall	.+0      	; 0x2b3c <ICR1_REG_LOAD+0x6>
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	9a 83       	std	Y+2, r25	; 0x02
    2b42:	89 83       	std	Y+1, r24	; 0x01
	ICR1L_REG = ICR1_VALUE;
    2b44:	e6 e4       	ldi	r30, 0x46	; 70
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	80 83       	st	Z, r24
}
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <TIMER1_INIT>:
/**********************************************************************/


void TIMER1_INIT(u8 TIMER_MODE ,u8 ICU_SENSING_EDGE , u8 CLOCK_SOURCE , u8 INTERRUPT_POLLING ,u16 TCNT_PRELOAD ,u16 OCRA_PRELOAD , u16 OCRB_PRELOAD , u16 ICR_PRELOAD, u8 OCO_INVERTING_NONINVERTING)
{
    2b56:	8f 92       	push	r8
    2b58:	af 92       	push	r10
    2b5a:	bf 92       	push	r11
    2b5c:	cf 92       	push	r12
    2b5e:	df 92       	push	r13
    2b60:	ef 92       	push	r14
    2b62:	ff 92       	push	r15
    2b64:	0f 93       	push	r16
    2b66:	1f 93       	push	r17
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	2d 97       	sbiw	r28, 0x0d	; 13
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	de bf       	out	0x3e, r29	; 62
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	cd bf       	out	0x3d, r28	; 61
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	6a 83       	std	Y+2, r22	; 0x02
    2b80:	4b 83       	std	Y+3, r20	; 0x03
    2b82:	2c 83       	std	Y+4, r18	; 0x04
    2b84:	1e 83       	std	Y+6, r17	; 0x06
    2b86:	0d 83       	std	Y+5, r16	; 0x05
    2b88:	f8 86       	std	Y+8, r15	; 0x08
    2b8a:	ef 82       	std	Y+7, r14	; 0x07
    2b8c:	da 86       	std	Y+10, r13	; 0x0a
    2b8e:	c9 86       	std	Y+9, r12	; 0x09
    2b90:	bc 86       	std	Y+12, r11	; 0x0c
    2b92:	ab 86       	std	Y+11, r10	; 0x0b
    2b94:	8d 86       	std	Y+13, r8	; 0x0d
	CLR(TCCR1A_REG , FOC1A);
    2b96:	af e4       	ldi	r26, 0x4F	; 79
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	ef e4       	ldi	r30, 0x4F	; 79
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	87 7f       	andi	r24, 0xF7	; 247
    2ba2:	8c 93       	st	X, r24
	CLR(TCCR1A_REG , FOC1B);
    2ba4:	af e4       	ldi	r26, 0x4F	; 79
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	ef e4       	ldi	r30, 0x4F	; 79
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	8b 7f       	andi	r24, 0xFB	; 251
    2bb0:	8c 93       	st	X, r24

	if(ICU_SENSING_EDGE == ICU_FALLING_EDGE)
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	88 23       	and	r24, r24
    2bb6:	79 f4       	brne	.+30     	; 0x2bd6 <TIMER1_INIT+0x80>
	{
		CLR(TCCR1B_REG , ICES1);
    2bb8:	ae e4       	ldi	r26, 0x4E	; 78
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	ee e4       	ldi	r30, 0x4E	; 78
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	8f 7b       	andi	r24, 0xBF	; 191
    2bc4:	8c 93       	st	X, r24
		SET(TCCR1B_REG , ICNC1 );
    2bc6:	ae e4       	ldi	r26, 0x4E	; 78
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	ee e4       	ldi	r30, 0x4E	; 78
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	80 68       	ori	r24, 0x80	; 128
    2bd2:	8c 93       	st	X, r24
    2bd4:	11 c0       	rjmp	.+34     	; 0x2bf8 <TIMER1_INIT+0xa2>
	}
	else if(ICU_SENSING_EDGE == ICU_RISING_EDGE)
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	81 30       	cpi	r24, 0x01	; 1
    2bda:	71 f4       	brne	.+28     	; 0x2bf8 <TIMER1_INIT+0xa2>
	{
		SET(TCCR1B_REG , ICES1);
    2bdc:	ae e4       	ldi	r26, 0x4E	; 78
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	ee e4       	ldi	r30, 0x4E	; 78
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	80 64       	ori	r24, 0x40	; 64
    2be8:	8c 93       	st	X, r24
		SET(TCCR1B_REG , ICNC1);
    2bea:	ae e4       	ldi	r26, 0x4E	; 78
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	ee e4       	ldi	r30, 0x4E	; 78
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	80 68       	ori	r24, 0x80	; 128
    2bf6:	8c 93       	st	X, r24
	}

	if(OCO_INVERTING_NONINVERTING == OCO1A_OCO1B_DISABLE)
    2bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bfa:	88 23       	and	r24, r24
    2bfc:	e9 f4       	brne	.+58     	; 0x2c38 <TIMER1_INIT+0xe2>
	{
		CLR(TCCR1A_REG , COM1A0);
    2bfe:	af e4       	ldi	r26, 0x4F	; 79
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	ef e4       	ldi	r30, 0x4F	; 79
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	8f 7b       	andi	r24, 0xBF	; 191
    2c0a:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , COM1A1);
    2c0c:	af e4       	ldi	r26, 0x4F	; 79
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	ef e4       	ldi	r30, 0x4F	; 79
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	8f 77       	andi	r24, 0x7F	; 127
    2c18:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , COM1B0);
    2c1a:	af e4       	ldi	r26, 0x4F	; 79
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	ef e4       	ldi	r30, 0x4F	; 79
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	8f 7e       	andi	r24, 0xEF	; 239
    2c26:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , COM1B1);
    2c28:	af e4       	ldi	r26, 0x4F	; 79
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	ef e4       	ldi	r30, 0x4F	; 79
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	8f 7d       	andi	r24, 0xDF	; 223
    2c34:	8c 93       	st	X, r24
    2c36:	5f c0       	rjmp	.+190    	; 0x2cf6 <TIMER1_INIT+0x1a0>
	}
	else if(OCO_INVERTING_NONINVERTING == NONINVERTING)
    2c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3a:	82 30       	cpi	r24, 0x02	; 2
    2c3c:	e9 f4       	brne	.+58     	; 0x2c78 <TIMER1_INIT+0x122>
	{
		CLR(TCCR1A_REG , COM1A0);
    2c3e:	af e4       	ldi	r26, 0x4F	; 79
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	ef e4       	ldi	r30, 0x4F	; 79
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	8f 7b       	andi	r24, 0xBF	; 191
    2c4a:	8c 93       	st	X, r24
		SET(TCCR1A_REG , COM1A1);
    2c4c:	af e4       	ldi	r26, 0x4F	; 79
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	ef e4       	ldi	r30, 0x4F	; 79
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	80 68       	ori	r24, 0x80	; 128
    2c58:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , COM1B0);
    2c5a:	af e4       	ldi	r26, 0x4F	; 79
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	ef e4       	ldi	r30, 0x4F	; 79
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	8f 7e       	andi	r24, 0xEF	; 239
    2c66:	8c 93       	st	X, r24
		SET(TCCR1A_REG , COM1B1);
    2c68:	af e4       	ldi	r26, 0x4F	; 79
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	ef e4       	ldi	r30, 0x4F	; 79
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	80 62       	ori	r24, 0x20	; 32
    2c74:	8c 93       	st	X, r24
    2c76:	3f c0       	rjmp	.+126    	; 0x2cf6 <TIMER1_INIT+0x1a0>

	}else if(OCO_INVERTING_NONINVERTING == INVERTING)
    2c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c7a:	83 30       	cpi	r24, 0x03	; 3
    2c7c:	e9 f4       	brne	.+58     	; 0x2cb8 <TIMER1_INIT+0x162>
	{
		SET(TCCR1A_REG , COM1A0);
    2c7e:	af e4       	ldi	r26, 0x4F	; 79
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	ef e4       	ldi	r30, 0x4F	; 79
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	80 64       	ori	r24, 0x40	; 64
    2c8a:	8c 93       	st	X, r24
		SET(TCCR1A_REG , COM1A1);
    2c8c:	af e4       	ldi	r26, 0x4F	; 79
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	ef e4       	ldi	r30, 0x4F	; 79
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	80 68       	ori	r24, 0x80	; 128
    2c98:	8c 93       	st	X, r24
		SET(TCCR1A_REG , COM1B0);
    2c9a:	af e4       	ldi	r26, 0x4F	; 79
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	ef e4       	ldi	r30, 0x4F	; 79
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	80 61       	ori	r24, 0x10	; 16
    2ca6:	8c 93       	st	X, r24
		SET(TCCR1A_REG , COM1B1);
    2ca8:	af e4       	ldi	r26, 0x4F	; 79
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	ef e4       	ldi	r30, 0x4F	; 79
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	80 62       	ori	r24, 0x20	; 32
    2cb4:	8c 93       	st	X, r24
    2cb6:	1f c0       	rjmp	.+62     	; 0x2cf6 <TIMER1_INIT+0x1a0>
	}else if(OCO_INVERTING_NONINVERTING == OCO1A_OCO1B_TOGGLE)
    2cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cba:	81 30       	cpi	r24, 0x01	; 1
    2cbc:	e1 f4       	brne	.+56     	; 0x2cf6 <TIMER1_INIT+0x1a0>
	{
		SET(TCCR1A_REG , COM1A0);
    2cbe:	af e4       	ldi	r26, 0x4F	; 79
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	ef e4       	ldi	r30, 0x4F	; 79
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	80 64       	ori	r24, 0x40	; 64
    2cca:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , COM1A1);
    2ccc:	af e4       	ldi	r26, 0x4F	; 79
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	ef e4       	ldi	r30, 0x4F	; 79
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	8f 77       	andi	r24, 0x7F	; 127
    2cd8:	8c 93       	st	X, r24
		SET(TCCR1A_REG , COM1B0);
    2cda:	af e4       	ldi	r26, 0x4F	; 79
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	ef e4       	ldi	r30, 0x4F	; 79
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	80 61       	ori	r24, 0x10	; 16
    2ce6:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , COM1B1);
    2ce8:	af e4       	ldi	r26, 0x4F	; 79
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	ef e4       	ldi	r30, 0x4F	; 79
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	8f 7d       	andi	r24, 0xDF	; 223
    2cf4:	8c 93       	st	X, r24
	}

	if(TIMER_MODE ==NORMAL)
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	88 23       	and	r24, r24
    2cfa:	e9 f4       	brne	.+58     	; 0x2d36 <TIMER1_INIT+0x1e0>
	{
		CLR(TCCR1A_REG , WGM10);
    2cfc:	af e4       	ldi	r26, 0x4F	; 79
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	ef e4       	ldi	r30, 0x4F	; 79
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	8e 7f       	andi	r24, 0xFE	; 254
    2d08:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , WGM11);
    2d0a:	af e4       	ldi	r26, 0x4F	; 79
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	ef e4       	ldi	r30, 0x4F	; 79
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	8d 7f       	andi	r24, 0xFD	; 253
    2d16:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM12);
    2d18:	ae e4       	ldi	r26, 0x4E	; 78
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	ee e4       	ldi	r30, 0x4E	; 78
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	87 7f       	andi	r24, 0xF7	; 247
    2d24:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM13);
    2d26:	ae e4       	ldi	r26, 0x4E	; 78
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	ee e4       	ldi	r30, 0x4E	; 78
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	8f 7e       	andi	r24, 0xEF	; 239
    2d32:	8c 93       	st	X, r24
    2d34:	bf c1       	rjmp	.+894    	; 0x30b4 <TIMER1_INIT+0x55e>

	}
	else if(TIMER_MODE ==PWM_C_PH8)
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	81 30       	cpi	r24, 0x01	; 1
    2d3a:	e9 f4       	brne	.+58     	; 0x2d76 <TIMER1_INIT+0x220>
	{
		SET(TCCR1A_REG , WGM10);
    2d3c:	af e4       	ldi	r26, 0x4F	; 79
    2d3e:	b0 e0       	ldi	r27, 0x00	; 0
    2d40:	ef e4       	ldi	r30, 0x4F	; 79
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	81 60       	ori	r24, 0x01	; 1
    2d48:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , WGM11);
    2d4a:	af e4       	ldi	r26, 0x4F	; 79
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	ef e4       	ldi	r30, 0x4F	; 79
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	8d 7f       	andi	r24, 0xFD	; 253
    2d56:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM12);
    2d58:	ae e4       	ldi	r26, 0x4E	; 78
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	ee e4       	ldi	r30, 0x4E	; 78
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	87 7f       	andi	r24, 0xF7	; 247
    2d64:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM13);
    2d66:	ae e4       	ldi	r26, 0x4E	; 78
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	ee e4       	ldi	r30, 0x4E	; 78
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	8f 7e       	andi	r24, 0xEF	; 239
    2d72:	8c 93       	st	X, r24
    2d74:	9f c1       	rjmp	.+830    	; 0x30b4 <TIMER1_INIT+0x55e>

	}
	else if(TIMER_MODE ==PWM_C_PH9)
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	82 30       	cpi	r24, 0x02	; 2
    2d7a:	e9 f4       	brne	.+58     	; 0x2db6 <TIMER1_INIT+0x260>
	{
		CLR(TCCR1A_REG , WGM10);
    2d7c:	af e4       	ldi	r26, 0x4F	; 79
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	ef e4       	ldi	r30, 0x4F	; 79
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	8e 7f       	andi	r24, 0xFE	; 254
    2d88:	8c 93       	st	X, r24
		SET(TCCR1A_REG , WGM11);
    2d8a:	af e4       	ldi	r26, 0x4F	; 79
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	ef e4       	ldi	r30, 0x4F	; 79
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	82 60       	ori	r24, 0x02	; 2
    2d96:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM12);
    2d98:	ae e4       	ldi	r26, 0x4E	; 78
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	ee e4       	ldi	r30, 0x4E	; 78
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	87 7f       	andi	r24, 0xF7	; 247
    2da4:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM13);
    2da6:	ae e4       	ldi	r26, 0x4E	; 78
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	ee e4       	ldi	r30, 0x4E	; 78
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	8f 7e       	andi	r24, 0xEF	; 239
    2db2:	8c 93       	st	X, r24
    2db4:	7f c1       	rjmp	.+766    	; 0x30b4 <TIMER1_INIT+0x55e>
	}
	else if(TIMER_MODE ==PWM_C_PH10)
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	83 30       	cpi	r24, 0x03	; 3
    2dba:	e9 f4       	brne	.+58     	; 0x2df6 <TIMER1_INIT+0x2a0>
	{
		SET(TCCR1A_REG , WGM10);
    2dbc:	af e4       	ldi	r26, 0x4F	; 79
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	ef e4       	ldi	r30, 0x4F	; 79
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	81 60       	ori	r24, 0x01	; 1
    2dc8:	8c 93       	st	X, r24
		SET(TCCR1A_REG , WGM11);
    2dca:	af e4       	ldi	r26, 0x4F	; 79
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	ef e4       	ldi	r30, 0x4F	; 79
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	82 60       	ori	r24, 0x02	; 2
    2dd6:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM12);
    2dd8:	ae e4       	ldi	r26, 0x4E	; 78
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	ee e4       	ldi	r30, 0x4E	; 78
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	87 7f       	andi	r24, 0xF7	; 247
    2de4:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM13);
    2de6:	ae e4       	ldi	r26, 0x4E	; 78
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	ee e4       	ldi	r30, 0x4E	; 78
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	8f 7e       	andi	r24, 0xEF	; 239
    2df2:	8c 93       	st	X, r24
    2df4:	5f c1       	rjmp	.+702    	; 0x30b4 <TIMER1_INIT+0x55e>
	}
	else if(TIMER_MODE ==CTC_OCR1A)
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	84 30       	cpi	r24, 0x04	; 4
    2dfa:	e9 f4       	brne	.+58     	; 0x2e36 <TIMER1_INIT+0x2e0>
	{
		CLR(TCCR1A_REG , WGM10);
    2dfc:	af e4       	ldi	r26, 0x4F	; 79
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	ef e4       	ldi	r30, 0x4F	; 79
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	8e 7f       	andi	r24, 0xFE	; 254
    2e08:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , WGM11);
    2e0a:	af e4       	ldi	r26, 0x4F	; 79
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	ef e4       	ldi	r30, 0x4F	; 79
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	8d 7f       	andi	r24, 0xFD	; 253
    2e16:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM12);
    2e18:	ae e4       	ldi	r26, 0x4E	; 78
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	ee e4       	ldi	r30, 0x4E	; 78
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	88 60       	ori	r24, 0x08	; 8
    2e24:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM13);
    2e26:	ae e4       	ldi	r26, 0x4E	; 78
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	ee e4       	ldi	r30, 0x4E	; 78
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	8f 7e       	andi	r24, 0xEF	; 239
    2e32:	8c 93       	st	X, r24
    2e34:	3f c1       	rjmp	.+638    	; 0x30b4 <TIMER1_INIT+0x55e>

	}
	else if(TIMER_MODE ==FAST_PWM8)
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	85 30       	cpi	r24, 0x05	; 5
    2e3a:	e9 f4       	brne	.+58     	; 0x2e76 <TIMER1_INIT+0x320>
	{
		SET(TCCR1A_REG , WGM10);
    2e3c:	af e4       	ldi	r26, 0x4F	; 79
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	ef e4       	ldi	r30, 0x4F	; 79
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	81 60       	ori	r24, 0x01	; 1
    2e48:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , WGM11);
    2e4a:	af e4       	ldi	r26, 0x4F	; 79
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	ef e4       	ldi	r30, 0x4F	; 79
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	8d 7f       	andi	r24, 0xFD	; 253
    2e56:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM12);
    2e58:	ae e4       	ldi	r26, 0x4E	; 78
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	ee e4       	ldi	r30, 0x4E	; 78
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	88 60       	ori	r24, 0x08	; 8
    2e64:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM13);
    2e66:	ae e4       	ldi	r26, 0x4E	; 78
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	ee e4       	ldi	r30, 0x4E	; 78
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	8f 7e       	andi	r24, 0xEF	; 239
    2e72:	8c 93       	st	X, r24
    2e74:	1f c1       	rjmp	.+574    	; 0x30b4 <TIMER1_INIT+0x55e>

	}
	else if(TIMER_MODE ==FAST_PWM9)
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	86 30       	cpi	r24, 0x06	; 6
    2e7a:	e9 f4       	brne	.+58     	; 0x2eb6 <TIMER1_INIT+0x360>
	{
		CLR(TCCR1A_REG , WGM10);
    2e7c:	af e4       	ldi	r26, 0x4F	; 79
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	ef e4       	ldi	r30, 0x4F	; 79
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	8e 7f       	andi	r24, 0xFE	; 254
    2e88:	8c 93       	st	X, r24
		SET(TCCR1A_REG , WGM11);
    2e8a:	af e4       	ldi	r26, 0x4F	; 79
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	ef e4       	ldi	r30, 0x4F	; 79
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	82 60       	ori	r24, 0x02	; 2
    2e96:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM12);
    2e98:	ae e4       	ldi	r26, 0x4E	; 78
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	ee e4       	ldi	r30, 0x4E	; 78
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	88 60       	ori	r24, 0x08	; 8
    2ea4:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM13);
    2ea6:	ae e4       	ldi	r26, 0x4E	; 78
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	ee e4       	ldi	r30, 0x4E	; 78
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	8f 7e       	andi	r24, 0xEF	; 239
    2eb2:	8c 93       	st	X, r24
    2eb4:	ff c0       	rjmp	.+510    	; 0x30b4 <TIMER1_INIT+0x55e>

	}
	else if(TIMER_MODE ==FAST_PWM10)
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	87 30       	cpi	r24, 0x07	; 7
    2eba:	e9 f4       	brne	.+58     	; 0x2ef6 <TIMER1_INIT+0x3a0>
	{
		SET(TCCR1A_REG , WGM10);
    2ebc:	af e4       	ldi	r26, 0x4F	; 79
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	ef e4       	ldi	r30, 0x4F	; 79
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	81 60       	ori	r24, 0x01	; 1
    2ec8:	8c 93       	st	X, r24
		SET(TCCR1A_REG , WGM11);
    2eca:	af e4       	ldi	r26, 0x4F	; 79
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	ef e4       	ldi	r30, 0x4F	; 79
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	82 60       	ori	r24, 0x02	; 2
    2ed6:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM12);
    2ed8:	ae e4       	ldi	r26, 0x4E	; 78
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	ee e4       	ldi	r30, 0x4E	; 78
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	88 60       	ori	r24, 0x08	; 8
    2ee4:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM13);
    2ee6:	ae e4       	ldi	r26, 0x4E	; 78
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	ee e4       	ldi	r30, 0x4E	; 78
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	8f 7e       	andi	r24, 0xEF	; 239
    2ef2:	8c 93       	st	X, r24
    2ef4:	df c0       	rjmp	.+446    	; 0x30b4 <TIMER1_INIT+0x55e>

	}
	else if(TIMER_MODE ==PWM_C_PHF_ICR1)
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	88 30       	cpi	r24, 0x08	; 8
    2efa:	e9 f4       	brne	.+58     	; 0x2f36 <TIMER1_INIT+0x3e0>
	{
		CLR(TCCR1A_REG , WGM10);
    2efc:	af e4       	ldi	r26, 0x4F	; 79
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	ef e4       	ldi	r30, 0x4F	; 79
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	8e 7f       	andi	r24, 0xFE	; 254
    2f08:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , WGM11);
    2f0a:	af e4       	ldi	r26, 0x4F	; 79
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	ef e4       	ldi	r30, 0x4F	; 79
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	8d 7f       	andi	r24, 0xFD	; 253
    2f16:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM12);
    2f18:	ae e4       	ldi	r26, 0x4E	; 78
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	ee e4       	ldi	r30, 0x4E	; 78
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	87 7f       	andi	r24, 0xF7	; 247
    2f24:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM13);
    2f26:	ae e4       	ldi	r26, 0x4E	; 78
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	ee e4       	ldi	r30, 0x4E	; 78
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	80 61       	ori	r24, 0x10	; 16
    2f32:	8c 93       	st	X, r24
    2f34:	bf c0       	rjmp	.+382    	; 0x30b4 <TIMER1_INIT+0x55e>
	}
	else if(TIMER_MODE ==PWM_C_PHF_OCR1A)
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	89 30       	cpi	r24, 0x09	; 9
    2f3a:	e9 f4       	brne	.+58     	; 0x2f76 <TIMER1_INIT+0x420>
	{
		SET(TCCR1A_REG , WGM10);
    2f3c:	af e4       	ldi	r26, 0x4F	; 79
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	ef e4       	ldi	r30, 0x4F	; 79
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	81 60       	ori	r24, 0x01	; 1
    2f48:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , WGM11);
    2f4a:	af e4       	ldi	r26, 0x4F	; 79
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	ef e4       	ldi	r30, 0x4F	; 79
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	80 81       	ld	r24, Z
    2f54:	8d 7f       	andi	r24, 0xFD	; 253
    2f56:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM12);
    2f58:	ae e4       	ldi	r26, 0x4E	; 78
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	ee e4       	ldi	r30, 0x4E	; 78
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	87 7f       	andi	r24, 0xF7	; 247
    2f64:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM13);
    2f66:	ae e4       	ldi	r26, 0x4E	; 78
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	ee e4       	ldi	r30, 0x4E	; 78
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	80 61       	ori	r24, 0x10	; 16
    2f72:	8c 93       	st	X, r24
    2f74:	9f c0       	rjmp	.+318    	; 0x30b4 <TIMER1_INIT+0x55e>
	}
	else if(TIMER_MODE ==PWM_C_PH_ICR1)
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	8a 30       	cpi	r24, 0x0A	; 10
    2f7a:	e9 f4       	brne	.+58     	; 0x2fb6 <TIMER1_INIT+0x460>
	{
		CLR(TCCR1A_REG , WGM10);
    2f7c:	af e4       	ldi	r26, 0x4F	; 79
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	ef e4       	ldi	r30, 0x4F	; 79
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	8e 7f       	andi	r24, 0xFE	; 254
    2f88:	8c 93       	st	X, r24
		SET(TCCR1A_REG , WGM11);
    2f8a:	af e4       	ldi	r26, 0x4F	; 79
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	ef e4       	ldi	r30, 0x4F	; 79
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	82 60       	ori	r24, 0x02	; 2
    2f96:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM12);
    2f98:	ae e4       	ldi	r26, 0x4E	; 78
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	ee e4       	ldi	r30, 0x4E	; 78
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 81       	ld	r24, Z
    2fa2:	87 7f       	andi	r24, 0xF7	; 247
    2fa4:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM13);
    2fa6:	ae e4       	ldi	r26, 0x4E	; 78
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	ee e4       	ldi	r30, 0x4E	; 78
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z
    2fb0:	80 61       	ori	r24, 0x10	; 16
    2fb2:	8c 93       	st	X, r24
    2fb4:	7f c0       	rjmp	.+254    	; 0x30b4 <TIMER1_INIT+0x55e>
	}
	else if(TIMER_MODE ==PWM_C_PH_OCR1A)
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	8b 30       	cpi	r24, 0x0B	; 11
    2fba:	e9 f4       	brne	.+58     	; 0x2ff6 <TIMER1_INIT+0x4a0>
	{
		SET(TCCR1A_REG , WGM10);
    2fbc:	af e4       	ldi	r26, 0x4F	; 79
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	ef e4       	ldi	r30, 0x4F	; 79
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	81 60       	ori	r24, 0x01	; 1
    2fc8:	8c 93       	st	X, r24
		SET(TCCR1A_REG , WGM11);
    2fca:	af e4       	ldi	r26, 0x4F	; 79
    2fcc:	b0 e0       	ldi	r27, 0x00	; 0
    2fce:	ef e4       	ldi	r30, 0x4F	; 79
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	82 60       	ori	r24, 0x02	; 2
    2fd6:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , WGM12);
    2fd8:	ae e4       	ldi	r26, 0x4E	; 78
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	ee e4       	ldi	r30, 0x4E	; 78
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	87 7f       	andi	r24, 0xF7	; 247
    2fe4:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM13);
    2fe6:	ae e4       	ldi	r26, 0x4E	; 78
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	ee e4       	ldi	r30, 0x4E	; 78
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	80 81       	ld	r24, Z
    2ff0:	80 61       	ori	r24, 0x10	; 16
    2ff2:	8c 93       	st	X, r24
    2ff4:	5f c0       	rjmp	.+190    	; 0x30b4 <TIMER1_INIT+0x55e>
	}
	else if(TIMER_MODE ==CTC_ICR1)
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	8c 30       	cpi	r24, 0x0C	; 12
    2ffa:	e9 f4       	brne	.+58     	; 0x3036 <TIMER1_INIT+0x4e0>
	{
		CLR(TCCR1A_REG , WGM10);
    2ffc:	af e4       	ldi	r26, 0x4F	; 79
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	ef e4       	ldi	r30, 0x4F	; 79
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	8e 7f       	andi	r24, 0xFE	; 254
    3008:	8c 93       	st	X, r24
		CLR(TCCR1A_REG , WGM11);
    300a:	af e4       	ldi	r26, 0x4F	; 79
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	ef e4       	ldi	r30, 0x4F	; 79
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	8d 7f       	andi	r24, 0xFD	; 253
    3016:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM12);
    3018:	ae e4       	ldi	r26, 0x4E	; 78
    301a:	b0 e0       	ldi	r27, 0x00	; 0
    301c:	ee e4       	ldi	r30, 0x4E	; 78
    301e:	f0 e0       	ldi	r31, 0x00	; 0
    3020:	80 81       	ld	r24, Z
    3022:	88 60       	ori	r24, 0x08	; 8
    3024:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM13);
    3026:	ae e4       	ldi	r26, 0x4E	; 78
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	ee e4       	ldi	r30, 0x4E	; 78
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	80 61       	ori	r24, 0x10	; 16
    3032:	8c 93       	st	X, r24
    3034:	3f c0       	rjmp	.+126    	; 0x30b4 <TIMER1_INIT+0x55e>

	}
	else if(TIMER_MODE ==FAST_PWM_ICR1)
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	8e 30       	cpi	r24, 0x0E	; 14
    303a:	e9 f4       	brne	.+58     	; 0x3076 <TIMER1_INIT+0x520>
	{
		CLR(TCCR1A_REG , WGM10);
    303c:	af e4       	ldi	r26, 0x4F	; 79
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	ef e4       	ldi	r30, 0x4F	; 79
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	8e 7f       	andi	r24, 0xFE	; 254
    3048:	8c 93       	st	X, r24
		SET(TCCR1A_REG , WGM11);
    304a:	af e4       	ldi	r26, 0x4F	; 79
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	ef e4       	ldi	r30, 0x4F	; 79
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	82 60       	ori	r24, 0x02	; 2
    3056:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM12);
    3058:	ae e4       	ldi	r26, 0x4E	; 78
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	ee e4       	ldi	r30, 0x4E	; 78
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	88 60       	ori	r24, 0x08	; 8
    3064:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM13);
    3066:	ae e4       	ldi	r26, 0x4E	; 78
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	ee e4       	ldi	r30, 0x4E	; 78
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	80 61       	ori	r24, 0x10	; 16
    3072:	8c 93       	st	X, r24
    3074:	1f c0       	rjmp	.+62     	; 0x30b4 <TIMER1_INIT+0x55e>

	}
	else if(TIMER_MODE ==FAST_PWM_OCR1A)
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	8f 30       	cpi	r24, 0x0F	; 15
    307a:	e1 f4       	brne	.+56     	; 0x30b4 <TIMER1_INIT+0x55e>
	{
		SET(TCCR1A_REG , WGM10);
    307c:	af e4       	ldi	r26, 0x4F	; 79
    307e:	b0 e0       	ldi	r27, 0x00	; 0
    3080:	ef e4       	ldi	r30, 0x4F	; 79
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
    3086:	81 60       	ori	r24, 0x01	; 1
    3088:	8c 93       	st	X, r24
		SET(TCCR1A_REG , WGM11);
    308a:	af e4       	ldi	r26, 0x4F	; 79
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	ef e4       	ldi	r30, 0x4F	; 79
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	80 81       	ld	r24, Z
    3094:	82 60       	ori	r24, 0x02	; 2
    3096:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM12);
    3098:	ae e4       	ldi	r26, 0x4E	; 78
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	ee e4       	ldi	r30, 0x4E	; 78
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	88 60       	ori	r24, 0x08	; 8
    30a4:	8c 93       	st	X, r24
		SET(TCCR1B_REG , WGM13);
    30a6:	ae e4       	ldi	r26, 0x4E	; 78
    30a8:	b0 e0       	ldi	r27, 0x00	; 0
    30aa:	ee e4       	ldi	r30, 0x4E	; 78
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	80 81       	ld	r24, Z
    30b0:	80 61       	ori	r24, 0x10	; 16
    30b2:	8c 93       	st	X, r24

	}



	if(CLOCK_SOURCE == OFF)
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	88 23       	and	r24, r24
    30b8:	b1 f4       	brne	.+44     	; 0x30e6 <TIMER1_INIT+0x590>
	{
		CLR(TCCR1B_REG , CS10);
    30ba:	ae e4       	ldi	r26, 0x4E	; 78
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	ee e4       	ldi	r30, 0x4E	; 78
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	8e 7f       	andi	r24, 0xFE	; 254
    30c6:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , CS11);
    30c8:	ae e4       	ldi	r26, 0x4E	; 78
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	ee e4       	ldi	r30, 0x4E	; 78
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	8d 7f       	andi	r24, 0xFD	; 253
    30d4:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , CS12);
    30d6:	ae e4       	ldi	r26, 0x4E	; 78
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	ee e4       	ldi	r30, 0x4E	; 78
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	8b 7f       	andi	r24, 0xFB	; 251
    30e2:	8c 93       	st	X, r24
    30e4:	c2 c0       	rjmp	.+388    	; 0x326a <TIMER1_INIT+0x714>
	}
	else if(CLOCK_SOURCE == FCPU)
    30e6:	8b 81       	ldd	r24, Y+3	; 0x03
    30e8:	81 30       	cpi	r24, 0x01	; 1
    30ea:	b1 f4       	brne	.+44     	; 0x3118 <TIMER1_INIT+0x5c2>
	{
		SET(TCCR1B_REG , CS10);
    30ec:	ae e4       	ldi	r26, 0x4E	; 78
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	ee e4       	ldi	r30, 0x4E	; 78
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	81 60       	ori	r24, 0x01	; 1
    30f8:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , CS11);
    30fa:	ae e4       	ldi	r26, 0x4E	; 78
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	ee e4       	ldi	r30, 0x4E	; 78
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	8d 7f       	andi	r24, 0xFD	; 253
    3106:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , CS12);
    3108:	ae e4       	ldi	r26, 0x4E	; 78
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	ee e4       	ldi	r30, 0x4E	; 78
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	8b 7f       	andi	r24, 0xFB	; 251
    3114:	8c 93       	st	X, r24
    3116:	a9 c0       	rjmp	.+338    	; 0x326a <TIMER1_INIT+0x714>
	}
	else if(CLOCK_SOURCE == FCPU8)
    3118:	8b 81       	ldd	r24, Y+3	; 0x03
    311a:	82 30       	cpi	r24, 0x02	; 2
    311c:	b1 f4       	brne	.+44     	; 0x314a <TIMER1_INIT+0x5f4>
	{
		CLR(TCCR1B_REG , CS10);
    311e:	ae e4       	ldi	r26, 0x4E	; 78
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	ee e4       	ldi	r30, 0x4E	; 78
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	8e 7f       	andi	r24, 0xFE	; 254
    312a:	8c 93       	st	X, r24
		SET(TCCR1B_REG , CS11);
    312c:	ae e4       	ldi	r26, 0x4E	; 78
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	ee e4       	ldi	r30, 0x4E	; 78
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	82 60       	ori	r24, 0x02	; 2
    3138:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , CS12);
    313a:	ae e4       	ldi	r26, 0x4E	; 78
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	ee e4       	ldi	r30, 0x4E	; 78
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	8b 7f       	andi	r24, 0xFB	; 251
    3146:	8c 93       	st	X, r24
    3148:	90 c0       	rjmp	.+288    	; 0x326a <TIMER1_INIT+0x714>
	}
	else if(CLOCK_SOURCE == FCPU64)
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	83 30       	cpi	r24, 0x03	; 3
    314e:	b1 f4       	brne	.+44     	; 0x317c <TIMER1_INIT+0x626>
	{
		SET(TCCR1B_REG , CS10);
    3150:	ae e4       	ldi	r26, 0x4E	; 78
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	ee e4       	ldi	r30, 0x4E	; 78
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	81 60       	ori	r24, 0x01	; 1
    315c:	8c 93       	st	X, r24
		SET(TCCR1B_REG , CS11);
    315e:	ae e4       	ldi	r26, 0x4E	; 78
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	ee e4       	ldi	r30, 0x4E	; 78
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	82 60       	ori	r24, 0x02	; 2
    316a:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , CS12);
    316c:	ae e4       	ldi	r26, 0x4E	; 78
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	ee e4       	ldi	r30, 0x4E	; 78
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	80 81       	ld	r24, Z
    3176:	8b 7f       	andi	r24, 0xFB	; 251
    3178:	8c 93       	st	X, r24
    317a:	77 c0       	rjmp	.+238    	; 0x326a <TIMER1_INIT+0x714>
	}
	else if(CLOCK_SOURCE == FCPU256)
    317c:	8b 81       	ldd	r24, Y+3	; 0x03
    317e:	84 30       	cpi	r24, 0x04	; 4
    3180:	b1 f4       	brne	.+44     	; 0x31ae <TIMER1_INIT+0x658>
	{
		CLR(TCCR1B_REG , CS10);
    3182:	ae e4       	ldi	r26, 0x4E	; 78
    3184:	b0 e0       	ldi	r27, 0x00	; 0
    3186:	ee e4       	ldi	r30, 0x4E	; 78
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	80 81       	ld	r24, Z
    318c:	8e 7f       	andi	r24, 0xFE	; 254
    318e:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , CS11);
    3190:	ae e4       	ldi	r26, 0x4E	; 78
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	ee e4       	ldi	r30, 0x4E	; 78
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	80 81       	ld	r24, Z
    319a:	8d 7f       	andi	r24, 0xFD	; 253
    319c:	8c 93       	st	X, r24
		SET(TCCR1B_REG , CS12);
    319e:	ae e4       	ldi	r26, 0x4E	; 78
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	ee e4       	ldi	r30, 0x4E	; 78
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	80 81       	ld	r24, Z
    31a8:	84 60       	ori	r24, 0x04	; 4
    31aa:	8c 93       	st	X, r24
    31ac:	5e c0       	rjmp	.+188    	; 0x326a <TIMER1_INIT+0x714>
	}
	else if(CLOCK_SOURCE == FCPU1024)
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	85 30       	cpi	r24, 0x05	; 5
    31b2:	b1 f4       	brne	.+44     	; 0x31e0 <TIMER1_INIT+0x68a>
	{
		SET(TCCR1B_REG , CS10);
    31b4:	ae e4       	ldi	r26, 0x4E	; 78
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	ee e4       	ldi	r30, 0x4E	; 78
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	80 81       	ld	r24, Z
    31be:	81 60       	ori	r24, 0x01	; 1
    31c0:	8c 93       	st	X, r24
		CLR(TCCR1B_REG , CS11);
    31c2:	ae e4       	ldi	r26, 0x4E	; 78
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	ee e4       	ldi	r30, 0x4E	; 78
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	8d 7f       	andi	r24, 0xFD	; 253
    31ce:	8c 93       	st	X, r24
		SET(TCCR1B_REG , CS12);
    31d0:	ae e4       	ldi	r26, 0x4E	; 78
    31d2:	b0 e0       	ldi	r27, 0x00	; 0
    31d4:	ee e4       	ldi	r30, 0x4E	; 78
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	80 81       	ld	r24, Z
    31da:	84 60       	ori	r24, 0x04	; 4
    31dc:	8c 93       	st	X, r24
    31de:	45 c0       	rjmp	.+138    	; 0x326a <TIMER1_INIT+0x714>
	}
	else if(CLOCK_SOURCE == FALLING_EDGE_COUNTER)
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	86 30       	cpi	r24, 0x06	; 6
    31e4:	01 f5       	brne	.+64     	; 0x3226 <TIMER1_INIT+0x6d0>
	{
		CLR(TCCR1B_REG , CS10);
    31e6:	ae e4       	ldi	r26, 0x4E	; 78
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	ee e4       	ldi	r30, 0x4E	; 78
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 81       	ld	r24, Z
    31f0:	8e 7f       	andi	r24, 0xFE	; 254
    31f2:	8c 93       	st	X, r24
		SET(TCCR1B_REG , CS11);
    31f4:	ae e4       	ldi	r26, 0x4E	; 78
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	ee e4       	ldi	r30, 0x4E	; 78
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	82 60       	ori	r24, 0x02	; 2
    3200:	8c 93       	st	X, r24
		SET(TCCR1B_REG , CS12);
    3202:	ae e4       	ldi	r26, 0x4E	; 78
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	ee e4       	ldi	r30, 0x4E	; 78
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	84 60       	ori	r24, 0x04	; 4
    320e:	8c 93       	st	X, r24
		DIO_voidSetpinDirection(PORTB,PIN1,IN);
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	61 e0       	ldi	r22, 0x01	; 1
    3214:	40 e0       	ldi	r20, 0x00	; 0
    3216:	0e 94 1f 08 	call	0x103e	; 0x103e <DIO_voidSetpinDirection>
		DIO_voidSetpinValue(PORTB,PIN1,HIGH);
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	61 e0       	ldi	r22, 0x01	; 1
    321e:	41 e0       	ldi	r20, 0x01	; 1
    3220:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetpinValue>
    3224:	22 c0       	rjmp	.+68     	; 0x326a <TIMER1_INIT+0x714>
	}
	else if(CLOCK_SOURCE == RISING_EDGE_COUNTER)
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	87 30       	cpi	r24, 0x07	; 7
    322a:	f9 f4       	brne	.+62     	; 0x326a <TIMER1_INIT+0x714>
	{
		SET(TCCR1B_REG , CS10);
    322c:	ae e4       	ldi	r26, 0x4E	; 78
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	ee e4       	ldi	r30, 0x4E	; 78
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	80 81       	ld	r24, Z
    3236:	81 60       	ori	r24, 0x01	; 1
    3238:	8c 93       	st	X, r24
		SET(TCCR1B_REG , CS11);
    323a:	ae e4       	ldi	r26, 0x4E	; 78
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	ee e4       	ldi	r30, 0x4E	; 78
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	82 60       	ori	r24, 0x02	; 2
    3246:	8c 93       	st	X, r24
		SET(TCCR1B_REG , CS12);
    3248:	ae e4       	ldi	r26, 0x4E	; 78
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	ee e4       	ldi	r30, 0x4E	; 78
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	84 60       	ori	r24, 0x04	; 4
    3254:	8c 93       	st	X, r24
		DIO_voidSetpinDirection(PORTB,PIN1,IN);
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	61 e0       	ldi	r22, 0x01	; 1
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	0e 94 1f 08 	call	0x103e	; 0x103e <DIO_voidSetpinDirection>
		DIO_voidSetpinValue(PORTB,PIN1,LOW);
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	61 e0       	ldi	r22, 0x01	; 1
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetpinValue>

	}


	if(INTERRUPT_POLLING == INTERRUPT)
    326a:	8c 81       	ldd	r24, Y+4	; 0x04
    326c:	88 23       	and	r24, r24
    326e:	21 f5       	brne	.+72     	; 0x32b8 <TIMER1_INIT+0x762>
	{
		SET(TIMSK_REG , TOIE1);
    3270:	a9 e5       	ldi	r26, 0x59	; 89
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e9 e5       	ldi	r30, 0x59	; 89
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	84 60       	ori	r24, 0x04	; 4
    327c:	8c 93       	st	X, r24
		SET(TIMSK_REG , OCIE1A);
    327e:	a9 e5       	ldi	r26, 0x59	; 89
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	e9 e5       	ldi	r30, 0x59	; 89
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	80 61       	ori	r24, 0x10	; 16
    328a:	8c 93       	st	X, r24
		SET(TIMSK_REG , OCIE1B);
    328c:	a9 e5       	ldi	r26, 0x59	; 89
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	e9 e5       	ldi	r30, 0x59	; 89
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	88 60       	ori	r24, 0x08	; 8
    3298:	8c 93       	st	X, r24
		SET(TIMSK_REG , TICIE1);
    329a:	a9 e5       	ldi	r26, 0x59	; 89
    329c:	b0 e0       	ldi	r27, 0x00	; 0
    329e:	e9 e5       	ldi	r30, 0x59	; 89
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	80 81       	ld	r24, Z
    32a4:	80 62       	ori	r24, 0x20	; 32
    32a6:	8c 93       	st	X, r24
		SET(SREG_REG,GIE_PIN);
    32a8:	af e5       	ldi	r26, 0x5F	; 95
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	ef e5       	ldi	r30, 0x5F	; 95
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	80 68       	ori	r24, 0x80	; 128
    32b4:	8c 93       	st	X, r24
    32b6:	1f c0       	rjmp	.+62     	; 0x32f6 <TIMER1_INIT+0x7a0>
	}
	else if(INTERRUPT_POLLING == POLLING)
    32b8:	8c 81       	ldd	r24, Y+4	; 0x04
    32ba:	81 30       	cpi	r24, 0x01	; 1
    32bc:	e1 f4       	brne	.+56     	; 0x32f6 <TIMER1_INIT+0x7a0>
	{
		CLR(TIMSK_REG , TOIE1);
    32be:	a9 e5       	ldi	r26, 0x59	; 89
    32c0:	b0 e0       	ldi	r27, 0x00	; 0
    32c2:	e9 e5       	ldi	r30, 0x59	; 89
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	80 81       	ld	r24, Z
    32c8:	8b 7f       	andi	r24, 0xFB	; 251
    32ca:	8c 93       	st	X, r24
		CLR(TIMSK_REG , OCIE1A);
    32cc:	a9 e5       	ldi	r26, 0x59	; 89
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	e9 e5       	ldi	r30, 0x59	; 89
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	8f 7e       	andi	r24, 0xEF	; 239
    32d8:	8c 93       	st	X, r24
		CLR(TIMSK_REG , OCIE1B);
    32da:	a9 e5       	ldi	r26, 0x59	; 89
    32dc:	b0 e0       	ldi	r27, 0x00	; 0
    32de:	e9 e5       	ldi	r30, 0x59	; 89
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	80 81       	ld	r24, Z
    32e4:	87 7f       	andi	r24, 0xF7	; 247
    32e6:	8c 93       	st	X, r24
		CLR(TIMSK_REG , TICIE1);
    32e8:	a9 e5       	ldi	r26, 0x59	; 89
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	e9 e5       	ldi	r30, 0x59	; 89
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	8f 7d       	andi	r24, 0xDF	; 223
    32f4:	8c 93       	st	X, r24
	}

	TCNT1L_REG =  TCNT_PRELOAD;
    32f6:	ec e4       	ldi	r30, 0x4C	; 76
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	8d 81       	ldd	r24, Y+5	; 0x05
    32fc:	80 83       	st	Z, r24
	OCR1AL_REG = OCRA_PRELOAD;
    32fe:	ea e4       	ldi	r30, 0x4A	; 74
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	8f 81       	ldd	r24, Y+7	; 0x07
    3304:	80 83       	st	Z, r24
	OCR1BL_REG = OCRB_PRELOAD;
    3306:	e8 e4       	ldi	r30, 0x48	; 72
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	89 85       	ldd	r24, Y+9	; 0x09
    330c:	80 83       	st	Z, r24
	//ICR1_REG = ICR_PRELOAD;

}
    330e:	2d 96       	adiw	r28, 0x0d	; 13
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	cd bf       	out	0x3d, r28	; 61
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	1f 91       	pop	r17
    3320:	0f 91       	pop	r16
    3322:	ff 90       	pop	r15
    3324:	ef 90       	pop	r14
    3326:	df 90       	pop	r13
    3328:	cf 90       	pop	r12
    332a:	bf 90       	pop	r11
    332c:	af 90       	pop	r10
    332e:	8f 90       	pop	r8
    3330:	08 95       	ret

00003332 <ICU_SET_RISING_EDGE>:

void ICU_SET_RISING_EDGE()
{
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
	SET(TCCR1B_REG , ICES1);
    333a:	ae e4       	ldi	r26, 0x4E	; 78
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	ee e4       	ldi	r30, 0x4E	; 78
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	80 64       	ori	r24, 0x40	; 64
    3346:	8c 93       	st	X, r24
	SET(TCCR1B_REG , ICNC1);
    3348:	ae e4       	ldi	r26, 0x4E	; 78
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	ee e4       	ldi	r30, 0x4E	; 78
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	80 81       	ld	r24, Z
    3352:	80 68       	ori	r24, 0x80	; 128
    3354:	8c 93       	st	X, r24
}
    3356:	cf 91       	pop	r28
    3358:	df 91       	pop	r29
    335a:	08 95       	ret

0000335c <ICU_SET_FALLING_EDGE>:

void ICU_SET_FALLING_EDGE()
{
    335c:	df 93       	push	r29
    335e:	cf 93       	push	r28
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
	CLR(TCCR1B_REG , ICES1);
    3364:	ae e4       	ldi	r26, 0x4E	; 78
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	ee e4       	ldi	r30, 0x4E	; 78
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	8f 7b       	andi	r24, 0xBF	; 191
    3370:	8c 93       	st	X, r24
	SET(TCCR1B_REG , ICNC1);
    3372:	ae e4       	ldi	r26, 0x4E	; 78
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	ee e4       	ldi	r30, 0x4E	; 78
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
    337c:	80 68       	ori	r24, 0x80	; 128
    337e:	8c 93       	st	X, r24
}
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <main>:
#include "TIMER1_int.h"
#include "TIMER1_register.h"
#include "LCD_int.h"

int main()
{
    3386:	8f 92       	push	r8
    3388:	af 92       	push	r10
    338a:	bf 92       	push	r11
    338c:	cf 92       	push	r12
    338e:	df 92       	push	r13
    3390:	ef 92       	push	r14
    3392:	ff 92       	push	r15
    3394:	0f 93       	push	r16
    3396:	1f 93       	push	r17
    3398:	df 93       	push	r29
    339a:	cf 93       	push	r28
    339c:	cd b7       	in	r28, 0x3d	; 61
    339e:	de b7       	in	r29, 0x3e	; 62
    33a0:	28 97       	sbiw	r28, 0x08	; 8
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	f8 94       	cli
    33a6:	de bf       	out	0x3e, r29	; 62
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	cd bf       	out	0x3d, r28	; 61
	static u8 FLAG =0;
	u16 TON , TOFF;
	int Freq , DutyCycle ;
	TIMER1_INIT(FAST_PWM10,ICU_RISING_EDGE , FCPU256 , POLLING , 0 ,625 , 625 , 0 , NONINVERTING);
    33ac:	87 e0       	ldi	r24, 0x07	; 7
    33ae:	61 e0       	ldi	r22, 0x01	; 1
    33b0:	44 e0       	ldi	r20, 0x04	; 4
    33b2:	21 e0       	ldi	r18, 0x01	; 1
    33b4:	00 e0       	ldi	r16, 0x00	; 0
    33b6:	10 e0       	ldi	r17, 0x00	; 0
    33b8:	0f 2e       	mov	r0, r31
    33ba:	f1 e7       	ldi	r31, 0x71	; 113
    33bc:	ef 2e       	mov	r14, r31
    33be:	f2 e0       	ldi	r31, 0x02	; 2
    33c0:	ff 2e       	mov	r15, r31
    33c2:	f0 2d       	mov	r31, r0
    33c4:	0f 2e       	mov	r0, r31
    33c6:	f1 e7       	ldi	r31, 0x71	; 113
    33c8:	cf 2e       	mov	r12, r31
    33ca:	f2 e0       	ldi	r31, 0x02	; 2
    33cc:	df 2e       	mov	r13, r31
    33ce:	f0 2d       	mov	r31, r0
    33d0:	aa 24       	eor	r10, r10
    33d2:	bb 24       	eor	r11, r11
    33d4:	88 24       	eor	r8, r8
    33d6:	68 94       	set
    33d8:	81 f8       	bld	r8, 1
    33da:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TIMER1_INIT>
	LCD_8voidInit();
    33de:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_8voidInit>
	LCD_CLEAR_DISPLAY();
    33e2:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_CLEAR_DISPLAY>
	while(1)
	{
		if(ICF1_Flag_Read()==1)
    33e6:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <ICF1_Flag_Read>
    33ea:	81 30       	cpi	r24, 0x01	; 1
    33ec:	e1 f7       	brne	.-8      	; 0x33e6 <main+0x60>
		{
			FLAG++;
    33ee:	80 91 7e 01 	lds	r24, 0x017E
    33f2:	8f 5f       	subi	r24, 0xFF	; 255
    33f4:	80 93 7e 01 	sts	0x017E, r24
			ICF1_Flag_Clear();
    33f8:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <ICF1_Flag_Clear>
			if(FLAG==3)
    33fc:	80 91 7e 01 	lds	r24, 0x017E
    3400:	83 30       	cpi	r24, 0x03	; 3
    3402:	31 f4       	brne	.+12     	; 0x3410 <main+0x8a>
			{
				TCNT1_REG_LOAD(0);
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <TCNT1_REG_LOAD>
				ICU_SET_FALLING_EDGE();
    340c:	0e 94 ae 19 	call	0x335c	; 0x335c <ICU_SET_FALLING_EDGE>
			}
			if(FLAG==4)
    3410:	80 91 7e 01 	lds	r24, 0x017E
    3414:	84 30       	cpi	r24, 0x04	; 4
    3416:	69 f4       	brne	.+26     	; 0x3432 <main+0xac>
			{
				TON =ICR1L_REG;
    3418:	e6 e4       	ldi	r30, 0x46	; 70
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	88 2f       	mov	r24, r24
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	98 87       	std	Y+8, r25	; 0x08
    3424:	8f 83       	std	Y+7, r24	; 0x07
				TCNT1_REG_LOAD(0);
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <TCNT1_REG_LOAD>
				ICU_SET_RISING_EDGE();
    342e:	0e 94 99 19 	call	0x3332	; 0x3332 <ICU_SET_RISING_EDGE>
			}
			if(FLAG==5)
    3432:	80 91 7e 01 	lds	r24, 0x017E
    3436:	85 30       	cpi	r24, 0x05	; 5
    3438:	69 f4       	brne	.+26     	; 0x3454 <main+0xce>
			{
				TOFF =ICR1L_REG;
    343a:	e6 e4       	ldi	r30, 0x46	; 70
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	88 2f       	mov	r24, r24
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	9e 83       	std	Y+6, r25	; 0x06
    3446:	8d 83       	std	Y+5, r24	; 0x05
				TCNT1_REG_LOAD(0);
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <TCNT1_REG_LOAD>
				ICU_SET_RISING_EDGE();
    3450:	0e 94 99 19 	call	0x3332	; 0x3332 <ICU_SET_RISING_EDGE>
			}
			if(FLAG==6)
    3454:	80 91 7e 01 	lds	r24, 0x017E
    3458:	86 30       	cpi	r24, 0x06	; 6
    345a:	29 f6       	brne	.-118    	; 0x33e6 <main+0x60>
				break;
			}

		}
	}
	DutyCycle = (int)(((float)(TON))/((float)(TON+TOFF)));
    345c:	8f 81       	ldd	r24, Y+7	; 0x07
    345e:	98 85       	ldd	r25, Y+8	; 0x08
    3460:	cc 01       	movw	r24, r24
    3462:	a0 e0       	ldi	r26, 0x00	; 0
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	bc 01       	movw	r22, r24
    3468:	cd 01       	movw	r24, r26
    346a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    346e:	7b 01       	movw	r14, r22
    3470:	8c 01       	movw	r16, r24
    3472:	2f 81       	ldd	r18, Y+7	; 0x07
    3474:	38 85       	ldd	r19, Y+8	; 0x08
    3476:	8d 81       	ldd	r24, Y+5	; 0x05
    3478:	9e 81       	ldd	r25, Y+6	; 0x06
    347a:	82 0f       	add	r24, r18
    347c:	93 1f       	adc	r25, r19
    347e:	cc 01       	movw	r24, r24
    3480:	a0 e0       	ldi	r26, 0x00	; 0
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	bc 01       	movw	r22, r24
    3486:	cd 01       	movw	r24, r26
    3488:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    348c:	9b 01       	movw	r18, r22
    348e:	ac 01       	movw	r20, r24
    3490:	c8 01       	movw	r24, r16
    3492:	b7 01       	movw	r22, r14
    3494:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	bc 01       	movw	r22, r24
    349e:	cd 01       	movw	r24, r26
    34a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	9a 83       	std	Y+2, r25	; 0x02
    34aa:	89 83       	std	Y+1, r24	; 0x01
	DutyCycle *= 100;
    34ac:	29 81       	ldd	r18, Y+1	; 0x01
    34ae:	3a 81       	ldd	r19, Y+2	; 0x02
    34b0:	84 e6       	ldi	r24, 0x64	; 100
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	ac 01       	movw	r20, r24
    34b6:	24 9f       	mul	r18, r20
    34b8:	c0 01       	movw	r24, r0
    34ba:	25 9f       	mul	r18, r21
    34bc:	90 0d       	add	r25, r0
    34be:	34 9f       	mul	r19, r20
    34c0:	90 0d       	add	r25, r0
    34c2:	11 24       	eor	r1, r1
    34c4:	9a 83       	std	Y+2, r25	; 0x02
    34c6:	89 83       	std	Y+1, r24	; 0x01
	Freq = 1000000 / ((int)(TON+TOFF));
    34c8:	2f 81       	ldd	r18, Y+7	; 0x07
    34ca:	38 85       	ldd	r19, Y+8	; 0x08
    34cc:	8d 81       	ldd	r24, Y+5	; 0x05
    34ce:	9e 81       	ldd	r25, Y+6	; 0x06
    34d0:	82 0f       	add	r24, r18
    34d2:	93 1f       	adc	r25, r19
    34d4:	9c 01       	movw	r18, r24
    34d6:	44 27       	eor	r20, r20
    34d8:	37 fd       	sbrc	r19, 7
    34da:	40 95       	com	r20
    34dc:	54 2f       	mov	r21, r20
    34de:	80 e4       	ldi	r24, 0x40	; 64
    34e0:	92 e4       	ldi	r25, 0x42	; 66
    34e2:	af e0       	ldi	r26, 0x0F	; 15
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	bc 01       	movw	r22, r24
    34e8:	cd 01       	movw	r24, r26
    34ea:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divmodsi4>
    34ee:	da 01       	movw	r26, r20
    34f0:	c9 01       	movw	r24, r18
    34f2:	9c 83       	std	Y+4, r25	; 0x04
    34f4:	8b 83       	std	Y+3, r24	; 0x03
	while(1)
	{
		LCD_voidGotoXY(0,0);
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	60 e0       	ldi	r22, 0x00	; 0
    34fa:	0e 94 75 0f 	call	0x1eea	; 0x1eea <LCD_voidGotoXY>
		LCD_voidWriteString((u8 *)"DC = ");
    34fe:	80 e6       	ldi	r24, 0x60	; 96
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_voidWriteString>
		LCD_WriteNum(DutyCycle);
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	9a 81       	ldd	r25, Y+2	; 0x02
    350a:	aa 27       	eor	r26, r26
    350c:	97 fd       	sbrc	r25, 7
    350e:	a0 95       	com	r26
    3510:	ba 2f       	mov	r27, r26
    3512:	bc 01       	movw	r22, r24
    3514:	cd 01       	movw	r24, r26
    3516:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_WriteNum>
		LCD_voidWriteString((u8 *)" %");
    351a:	86 e6       	ldi	r24, 0x66	; 102
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_voidWriteString>

		LCD_voidGotoXY(1,1);
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	61 e0       	ldi	r22, 0x01	; 1
    3526:	0e 94 75 0f 	call	0x1eea	; 0x1eea <LCD_voidGotoXY>
		LCD_voidWriteString((u8 *)"Freq = ");
    352a:	89 e6       	ldi	r24, 0x69	; 105
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_voidWriteString>
		LCD_WriteNum(Freq);
    3532:	8b 81       	ldd	r24, Y+3	; 0x03
    3534:	9c 81       	ldd	r25, Y+4	; 0x04
    3536:	aa 27       	eor	r26, r26
    3538:	97 fd       	sbrc	r25, 7
    353a:	a0 95       	com	r26
    353c:	ba 2f       	mov	r27, r26
    353e:	bc 01       	movw	r22, r24
    3540:	cd 01       	movw	r24, r26
    3542:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <LCD_WriteNum>
		LCD_voidWriteString((u8 *)" Hz");
    3546:	81 e7       	ldi	r24, 0x71	; 113
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_voidWriteString>
    354e:	d3 cf       	rjmp	.-90     	; 0x34f6 <main+0x170>

00003550 <__mulsi3>:
    3550:	62 9f       	mul	r22, r18
    3552:	d0 01       	movw	r26, r0
    3554:	73 9f       	mul	r23, r19
    3556:	f0 01       	movw	r30, r0
    3558:	82 9f       	mul	r24, r18
    355a:	e0 0d       	add	r30, r0
    355c:	f1 1d       	adc	r31, r1
    355e:	64 9f       	mul	r22, r20
    3560:	e0 0d       	add	r30, r0
    3562:	f1 1d       	adc	r31, r1
    3564:	92 9f       	mul	r25, r18
    3566:	f0 0d       	add	r31, r0
    3568:	83 9f       	mul	r24, r19
    356a:	f0 0d       	add	r31, r0
    356c:	74 9f       	mul	r23, r20
    356e:	f0 0d       	add	r31, r0
    3570:	65 9f       	mul	r22, r21
    3572:	f0 0d       	add	r31, r0
    3574:	99 27       	eor	r25, r25
    3576:	72 9f       	mul	r23, r18
    3578:	b0 0d       	add	r27, r0
    357a:	e1 1d       	adc	r30, r1
    357c:	f9 1f       	adc	r31, r25
    357e:	63 9f       	mul	r22, r19
    3580:	b0 0d       	add	r27, r0
    3582:	e1 1d       	adc	r30, r1
    3584:	f9 1f       	adc	r31, r25
    3586:	bd 01       	movw	r22, r26
    3588:	cf 01       	movw	r24, r30
    358a:	11 24       	eor	r1, r1
    358c:	08 95       	ret

0000358e <__divmodsi4>:
    358e:	97 fb       	bst	r25, 7
    3590:	09 2e       	mov	r0, r25
    3592:	05 26       	eor	r0, r21
    3594:	0e d0       	rcall	.+28     	; 0x35b2 <__divmodsi4_neg1>
    3596:	57 fd       	sbrc	r21, 7
    3598:	04 d0       	rcall	.+8      	; 0x35a2 <__divmodsi4_neg2>
    359a:	14 d0       	rcall	.+40     	; 0x35c4 <__udivmodsi4>
    359c:	0a d0       	rcall	.+20     	; 0x35b2 <__divmodsi4_neg1>
    359e:	00 1c       	adc	r0, r0
    35a0:	38 f4       	brcc	.+14     	; 0x35b0 <__divmodsi4_exit>

000035a2 <__divmodsi4_neg2>:
    35a2:	50 95       	com	r21
    35a4:	40 95       	com	r20
    35a6:	30 95       	com	r19
    35a8:	21 95       	neg	r18
    35aa:	3f 4f       	sbci	r19, 0xFF	; 255
    35ac:	4f 4f       	sbci	r20, 0xFF	; 255
    35ae:	5f 4f       	sbci	r21, 0xFF	; 255

000035b0 <__divmodsi4_exit>:
    35b0:	08 95       	ret

000035b2 <__divmodsi4_neg1>:
    35b2:	f6 f7       	brtc	.-4      	; 0x35b0 <__divmodsi4_exit>
    35b4:	90 95       	com	r25
    35b6:	80 95       	com	r24
    35b8:	70 95       	com	r23
    35ba:	61 95       	neg	r22
    35bc:	7f 4f       	sbci	r23, 0xFF	; 255
    35be:	8f 4f       	sbci	r24, 0xFF	; 255
    35c0:	9f 4f       	sbci	r25, 0xFF	; 255
    35c2:	08 95       	ret

000035c4 <__udivmodsi4>:
    35c4:	a1 e2       	ldi	r26, 0x21	; 33
    35c6:	1a 2e       	mov	r1, r26
    35c8:	aa 1b       	sub	r26, r26
    35ca:	bb 1b       	sub	r27, r27
    35cc:	fd 01       	movw	r30, r26
    35ce:	0d c0       	rjmp	.+26     	; 0x35ea <__udivmodsi4_ep>

000035d0 <__udivmodsi4_loop>:
    35d0:	aa 1f       	adc	r26, r26
    35d2:	bb 1f       	adc	r27, r27
    35d4:	ee 1f       	adc	r30, r30
    35d6:	ff 1f       	adc	r31, r31
    35d8:	a2 17       	cp	r26, r18
    35da:	b3 07       	cpc	r27, r19
    35dc:	e4 07       	cpc	r30, r20
    35de:	f5 07       	cpc	r31, r21
    35e0:	20 f0       	brcs	.+8      	; 0x35ea <__udivmodsi4_ep>
    35e2:	a2 1b       	sub	r26, r18
    35e4:	b3 0b       	sbc	r27, r19
    35e6:	e4 0b       	sbc	r30, r20
    35e8:	f5 0b       	sbc	r31, r21

000035ea <__udivmodsi4_ep>:
    35ea:	66 1f       	adc	r22, r22
    35ec:	77 1f       	adc	r23, r23
    35ee:	88 1f       	adc	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	1a 94       	dec	r1
    35f4:	69 f7       	brne	.-38     	; 0x35d0 <__udivmodsi4_loop>
    35f6:	60 95       	com	r22
    35f8:	70 95       	com	r23
    35fa:	80 95       	com	r24
    35fc:	90 95       	com	r25
    35fe:	9b 01       	movw	r18, r22
    3600:	ac 01       	movw	r20, r24
    3602:	bd 01       	movw	r22, r26
    3604:	cf 01       	movw	r24, r30
    3606:	08 95       	ret

00003608 <__prologue_saves__>:
    3608:	2f 92       	push	r2
    360a:	3f 92       	push	r3
    360c:	4f 92       	push	r4
    360e:	5f 92       	push	r5
    3610:	6f 92       	push	r6
    3612:	7f 92       	push	r7
    3614:	8f 92       	push	r8
    3616:	9f 92       	push	r9
    3618:	af 92       	push	r10
    361a:	bf 92       	push	r11
    361c:	cf 92       	push	r12
    361e:	df 92       	push	r13
    3620:	ef 92       	push	r14
    3622:	ff 92       	push	r15
    3624:	0f 93       	push	r16
    3626:	1f 93       	push	r17
    3628:	cf 93       	push	r28
    362a:	df 93       	push	r29
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	ca 1b       	sub	r28, r26
    3632:	db 0b       	sbc	r29, r27
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	f8 94       	cli
    3638:	de bf       	out	0x3e, r29	; 62
    363a:	0f be       	out	0x3f, r0	; 63
    363c:	cd bf       	out	0x3d, r28	; 61
    363e:	09 94       	ijmp

00003640 <__epilogue_restores__>:
    3640:	2a 88       	ldd	r2, Y+18	; 0x12
    3642:	39 88       	ldd	r3, Y+17	; 0x11
    3644:	48 88       	ldd	r4, Y+16	; 0x10
    3646:	5f 84       	ldd	r5, Y+15	; 0x0f
    3648:	6e 84       	ldd	r6, Y+14	; 0x0e
    364a:	7d 84       	ldd	r7, Y+13	; 0x0d
    364c:	8c 84       	ldd	r8, Y+12	; 0x0c
    364e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3650:	aa 84       	ldd	r10, Y+10	; 0x0a
    3652:	b9 84       	ldd	r11, Y+9	; 0x09
    3654:	c8 84       	ldd	r12, Y+8	; 0x08
    3656:	df 80       	ldd	r13, Y+7	; 0x07
    3658:	ee 80       	ldd	r14, Y+6	; 0x06
    365a:	fd 80       	ldd	r15, Y+5	; 0x05
    365c:	0c 81       	ldd	r16, Y+4	; 0x04
    365e:	1b 81       	ldd	r17, Y+3	; 0x03
    3660:	aa 81       	ldd	r26, Y+2	; 0x02
    3662:	b9 81       	ldd	r27, Y+1	; 0x01
    3664:	ce 0f       	add	r28, r30
    3666:	d1 1d       	adc	r29, r1
    3668:	0f b6       	in	r0, 0x3f	; 63
    366a:	f8 94       	cli
    366c:	de bf       	out	0x3e, r29	; 62
    366e:	0f be       	out	0x3f, r0	; 63
    3670:	cd bf       	out	0x3d, r28	; 61
    3672:	ed 01       	movw	r28, r26
    3674:	08 95       	ret

00003676 <_exit>:
    3676:	f8 94       	cli

00003678 <__stop_program>:
    3678:	ff cf       	rjmp	.-2      	; 0x3678 <__stop_program>
